description = 'Compiler for CS 4120\'s Xi programming language'
version = '0.1.0'

apply plugin: 'java'
apply plugin: 'application'
mainClassName = 'xic.Main'

repositories {
    flatDir {
        dirs 'libs'
    }
}

dependencies {
    testCompile "org.hamcrest:hamcrest-core:1.3"
    testCompile "junit:junit:4.12"
    compile files("libs/java_cup.jar")
    compile files("libs/commons-io-2.6.jar")
    compile files("libs/sexp-printer.jar")
    compile files("libs/pcollections.jar")
    compile files("libs/jgrapht-core-1.1.0.jar")
    compile files("libs/jgrapht-io-1.1.0-uber.jar")
}

clean.doFirst {
    FileTree garbage = fileTree(projectDir) {
        include "**/*.iparsed"
        include "**/*.parsed"
        include "**/*.lexed"
        include "**/*.typed"
        include "**/*.ir"
        include "**/*.s"
        include "**/*.dot"
        include "**/IXiLexer.java"
        include "**/IXiParser.java"
        include "**/IXiSymbol.java"
        include "**/XiLexer.java"
        include "**/XiParser.java"
        include "**/XiSymbol.java"
        include "xic"
    }
    delete garbage
}

jar {
    manifest {
        attributes 'Main-Class': 'xic.Main'
    }
    from {
        configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

test {
    testLogging {
        outputs.upToDateWhen {false}
        showStandardStreams = true
    }
}

task zip(type: Zip) {
    archiveName = 'xic.zip'
    from(projectDir) {
        include 'benchmark/'
        include 'buildSrc/'
        include 'gradle/'
        include 'libs/'
        include 'resources/'
        include 'src/'
        include 'tests/'
        include 'build.gradle'
        include 'gradlew'
        include 'gradlew.bat'
        include 'LICENSE'
        include 'README.md'
        include 'settings.gradle'
        include 'xic-build'
        include 'xic-dir'
        include 'xic-test'
    }
}

task jflexIXi(type: JFlexIXi) {}
task jflexXi(type: JFlexXi) {}

task cupIXi(type: CupIXi) {}
task cupXi(type: CupXi) {}

task xic(type: Exec) {
    executable "sh"
    args "-c", "cat resources/stub.sh build/libs/xic-0.1.0.jar >> xic && chmod 777 xic"
}

// test tasks left here for legacy purposes

task regression(type: GradleBuild, dependsOn:xic) {
    tasks = ['testLexer', 'testParser', 'testType']
}

task fails(type: Exec, dependsOn:xic) {
    executable "sh"    
    args "-c", "xth/xth -compilerpath . -workpath . -testpath tests/parser/failed_tests tests/parser/failed_tests/xthScript\
    && printf \"\\n========================================\\n\\n\"\
    && xth/xth -compilerpath . -workpath tests/lexer/failed_tests -testpath tests/lexer/failed_tests tests/lexer/failed_tests/xthScript\
    && printf \"\\n========================================\\n\\n\""
}

task testLexer(type: Exec, dependsOn:xic) {
    executable "sh"    
    args "-c", "xth/xth -compilerpath . -workpath . -testpath tests/lexer tests/lexer/xthScript && echo\
    && printf \"\\n========================================\\n\\n\"\
    && xth/xth -compilerpath . -workpath tests/lexer/failed_tests -testpath tests/lexer/failed_tests tests/lexer/failed_tests/xthScript\
    && printf \"\\n========================================\\n\\n\""
}

task testParser(type: Exec, dependsOn:xic) {
    executable "sh"    
    args "-c", "xth/xth -compilerpath . -workpath . -testpath tests/parser/ tests/parser/xthScript && echo\
    && printf \"\\n========================================\\n\\n\"\
    && xth/xth -compilerpath . -workpath tests/parser/failed_tests -testpath tests/parser/failed_tests tests/parser/failed_tests/xthScript\
    && printf \"\\n========================================\\n\\n\""
}

task testType(type: Exec, dependsOn:xic) {
    executable "sh"
    args "-c", "xth/xth -compilerpath . -workpath tests/type -testpath tests/type tests/type/xthScript\
    && printf \"\\n========================================\\n\\n\"\
    && xth/xth -compilerpath . -workpath tests/type/errors -testpath tests/type/errors tests/type/errors/xthScript\
    && printf \"\\n========================================\\n\\n\"\
    && xth/xth -compilerpath . -workpath tests/type/pa3-tests-manual -testpath tests/type/pa3-tests-manual tests/type/pa3-tests-manual/xthScript\
    && printf \"\\n========================================\\n\\n\""
}

task testIr(type: Exec, dependsOn:xic) {
    executable "sh"
    args "-c", "xth/xth -compilerpath . -workpath tests/ir/simple -testpath tests/ir/simple tests/ir/simple/xthScript\
    && printf \"\\n========================================\\n\\n\""
}

compileJava.dependsOn jflexIXi
compileJava.dependsOn jflexXi
compileJava.dependsOn cupIXi
compileJava.dependsOn cupXi
xic.dependsOn jar
