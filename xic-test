#!/bin/bash

build() {
   gradle xic
   printf "\n========================================\n\n"
}

test_all() {
  test_reg
  test_course
  test_object
}

test_course() {
    xth/xth -compilerpath . -workpath xth/tests -testpath xth/tests/pa5 xth/tests/pa5/xthScript
    printf "\n========================================\n\n" 
}

test_reg() {
    test_lex
    test_lex_fails
    test_parse
    test_parse_fails
    test_type
    test_ir
    test_ir_fails
    test_assemble
}

test_fails() {
    test_lex_fails
    test_parse_fails
    test_ir_fails
}

test_lex_fails() {
    xth/xth -compilerpath . -workpath tests/lexer/failed_tests -testpath tests/lexer/failed_tests tests/lexer/failed_tests/xthScript
    printf "\n========================================\n\n"
}

test_parse_fails() {
    xth/xth -compilerpath . -workpath tests/parser/failed_tests -testpath tests/parser/failed_tests tests/parser/failed_tests/xthScript
    printf "\n========================================\n\n" 
}

test_lex() {
    xth/xth -compilerpath . -workpath tests/lexer -testpath tests/lexer tests/lexer/xthScript
    printf "\n========================================\n\n"
}

test_parse() {
    xth/xth -compilerpath . -workpath tests/parser -testpath tests/parser tests/parser/xthScript
    printf "\n========================================\n\n"
}

test_type() {
    test_type_err
    test_type_valid
    test_type_man
}

test_type_valid() {
    xth/xth -compilerpath . -workpath tests/type -testpath tests/type tests/type/xthScript
    printf "\n========================================\n\n"
}

test_type_err() {
    xth/xth -compilerpath . -workpath tests/type/errors -testpath tests/type/errors tests/type/errors/xthScript
    printf "\n========================================\n\n"
}

test_type_man() {
    xth/xth -compilerpath . -workpath tests/type/pa3-tests-manual -testpath tests/type/pa3-tests-manual tests/type/pa3-tests-manual/xthScript
    printf "\n========================================\n\n"
}

test_ir_basic() {
    xth/xth -compilerpath . -workpath tests/ir/basic -testpath tests/ir/basic tests/ir/basic/xthScript
    printf "\n========================================\n\n"
}

test_ir_const_fold() {
    xth/xth -compilerpath . -workpath tests/ir/const_fold -testpath tests/ir/const_fold tests/ir/const_fold/xthScript
    printf "\n========================================\n\n"
}

test_ir_simple() {
    xth/xth -compilerpath . -workpath tests/ir/simple -testpath tests/ir/simple tests/ir/simple/xthScript
    printf "\n========================================\n\n"
}

test_ir_arrays() {
    xth/xth -compilerpath . -workpath tests/ir/arrays -testpath tests/ir/arrays tests/ir/arrays/xthScript
    printf "\n========================================\n\n"
}

test_ir_other() {
    xth/xth -compilerpath . -workpath tests/ir/other -testpath tests/ir/other tests/ir/other/xthScript
    printf "\n========================================\n\n"
}

test_ir_fails() {
    xth/xth -compilerpath . -workpath tests/ir/failed_tests -testpath tests/ir/failed_tests tests/ir/failed_tests/xthScript
    printf "\n========================================\n\n"
}

test_ir() {
    test_ir_basic
    test_ir_const_fold
    test_ir_simple
    test_ir_arrays
    test_ir_other
    test_ir_fails
}

test_assemble_simple() {
    xth/xth -compilerpath . -workpath tests/assemble/simple -testpath tests/assemble/simple tests/assemble/simple/xthScript
    printf "\n========================================\n\n"
}

test_assemble_arrays() {
    xth/xth -compilerpath . -workpath tests/assemble/arrays -testpath tests/assemble/arrays tests/assemble/arrays/xthScript   
    printf "\n========================================\n\n"
}

test_assemble_basic() {
    xth/xth -compilerpath . -workpath tests/assemble/basic -testpath tests/assemble/basic tests/assemble/basic/xthScript   
    printf "\n========================================\n\n"
}

test_assemble_ir_fails() {
    xth/xth -compilerpath . -workpath tests/assemble/ir_failed_tests -testpath tests/assemble/ir_failed_tests tests/assemble/ir_failed_tests/xthScript
    printf "\n========================================\n\n"
}

test_assemble_other() {
    xth/xth -compilerpath . -workpath tests/assemble/other -testpath tests/assemble/other tests/assemble/other/xthScript   
    printf "\n========================================\n\n"
}

test_assemble_assemble_specific() {
    xth/xth -compilerpath . -workpath tests/assemble/assemble-specific -testpath tests/assemble/assemble-specific tests/assemble/assemble-specific/xthScript     
    printf "\n========================================\n\n"
}

test_assemble() {
    test_assemble_basic
    test_assemble_simple
    test_assemble_arrays
    test_assemble_ir_fails
    test_assemble_other
    test_assemble_assemble_specific
}

test_optimize() {
    test_opt_fail
}

test_opt_fail() {
    xth/xth -compilerpath . -workpath tests/optimize/failed -testpath tests/optimize/failed tests/optimize/failed/xthScript     
    printf "\n========================================\n\n" 
}

test_object() {
  test_object_lex
  test_object_parse
  test_object_typecheck
}

test_object_lex() {
    xth/xth -compilerpath . -workpath tests/object/1_lexer -testpath tests/object/1_lexer tests/object/1_lexer/xthScript     
    printf "\n========================================\n\n" 
}

test_object_parse() {
    xth/xth -compilerpath . -workpath tests/object/2_parser -testpath tests/object/2_parser tests/object/2_parser/xthScript     
    printf "\n========================================\n\n" 
}

test_object_typecheck() {
    xth/xth -compilerpath . -workpath tests/object/3_type -testpath tests/object/3_type tests/object/3_type/xthScript     
    printf "\n========================================\n\n" 
}

if [[ -f $2 ]] ; then
  gradle xic
  FILE=$2
  case $1 in
    --asm)
      ./xic -target linux -libpath tests/libs -Oreg $FILE
      asm="${FILE%.*}.s"
      base=$(basename -- "$FILE")
      name="${base%.*}.s"
      cp $asm "runtime/tests/$name"
      platform=`uname`
      if [ "$platform" = "Linux" ]; then
          pushd "runtime"
          echo "running assembly:"
          echo ""
          time ./run_test "tests/$name"
          popd
      else
          echo "Cannot run assembly on $platform"
      fi
      rm "runtime/tests/$name"
      ;;
    --ir)
      ./xic --irgen -libpath tests/libs --optir initial --optir cf --optir cp --optir cse --optir final --optcfg initial --optcfg cf --optcfg cp --optcfg cse --optcfg final $FILE
      ;;
    --irrun)
    ./xic --irrun -libpath tests/libs --optir initial --optir cf --optir cp --optir cse --optir final --optcfg initial --optcfg cf --optcfg cp --optcfg cse --optcfg final $FILE
    ;;
    *)
      echo "Invalid use of xic-test"
      ;;
  esac
else
  gradle xic
  cmd=$1
  case $cmd in
  run)
      ./xic -target linux --irrun -libpath tests/libs $2
      ;;
  all)
      test_all
      ;;
  r|regression)
      test_reg
      ;;
  f|fails)
      test_fails
      ;;
  l|lexer)
      test_lex
      ;;
  p|parser)
      test_parse
      ;;
  t|type)
      test_type
      ;;
  te)
      test_type_err
      ;;
  tv)
      test_type_valid
      ;;
  tm)
      test_type_man
      ;;
  i|ir)
      test_ir
      ;;
  ib)
      test_ir_basic
      ;;
  ic)
      test_ir_const_fold
      ;;
  is)
      test_ir_simple
      ;;
  io)
      test_ir_other
      ;;
  ia)
      test_ir_arrays
      ;;
  if)
      test_ir_fails
      ;;
  a|assemble)
      test_assemble
      ;;
  as)
      test_assemble_simple
      ;;
  aa)
      test_assemble_arrays
      ;;
  ab)
      test_assemble_basic
      ;;
  airf)
      test_assemble_ir_fails
      ;;
  ao)
      test_assemble_other
      ;;
  aas)
      test_assemble_assemble_specific
      ;;
  c|course)
      test_course
      ;;
  opt|optimize)
      test_optimize
      ;;
  o|object)
      test_object
      ;;
  ol)
      test_object_lex
      ;;
  op)
      test_object_parse
      ;;
  ot)
      test_object_typecheck
      ;;
  *)
      echo "Usage:"
      echo ""
      echo "xic-test [command]"
      echo "Possible commands: "
      echo "  all r[egression] f[ails] c[ourse]"
      echo "  l[exer] p[arser] t[ype] te tv tm"
      echo "  i[r, b, c, s, o, a, f]"
      echo "  a[ssemble] as aa ab airf ao aas"
      echo "  opt[imize]"
      echo "  o[bject, l]"
      echo ""
      echo "OR"
      echo ""
      echo "xic-test [output] <file>"
      echo "Output:"
      echo "  --asm:    Generate and run assembly"
      echo "  --ir:     Generate and run ir, optir and optcfg"
      ;;
  esac
fi
