// Expressions
Expr ::= (Expr)
| Expr UnaryOp Expr
| Expr BinaryOp Expr
| FunctionCall
| ArrayCall
| LBRACE ExprList RBRACE
| INT
| TRUE
| FALSE
| CHAR
| STRING
| ID

UnaryOp ::= LNEG
| MINUS 

BinaryOp ::= MULT
| HMULT
| DIV
| MOD
| ADD
| MINUS
| LTE
| LT
| GTE
| GT
| EQEQ
| NEQ
| LAND
| LOR

// Function Calls
FunctionCall ::= ID LPAREN Args RPAREN 

Args ::= empty
| Expr FArgs

FArgs ::= COMMA Expr
| COMMA Expr FArgs

// Array Calls
ArrayCall ::= FunctionCall LBRACK Expr RBRACK IndexList
| ID LBRACK Expr RBRACK IndexList

IndexList ::= empty 
| IndexList LBRACK Expr RBRACK

// Variable Declaration
VarDeclr ::= ID COLON VarType 

VarType ::= VarType LBRACK RBRACK
| FVarType

FVarType ::= KeyType
| FVarType LBRACK EXPR RBRACK

KeyType ::= INT
| BOOL
| CHAR

// Assignment
Assign ::= IDList EQ ExprList

IDList ::= AssignName
| AssignName FIDList

FIDList ::= empty
| COMMA AssignName FIDList

AssignName ::= UNDERSCORE
| ID
| VarDeclr

ExprList ::= Expr
| Expr FExprList

FExprList ::= empty
| COMMA Expr FExprList

// While Statement
WhileStmt ::= WHILE Expr Block

// If Statement
IfStmt ::= IF Expr Block ElseStmt

ElseStmt ::= empty
| ELSE Expr Block

// Block
Block ::= Stmt
| LBRACE StmtListNoReturn RBRACE
| LBRACE StmtListNoReturn ReturnStmt RBRACE

StmtListNoReturn ::= empty
| StmtNoReturn StmtList

ReturnStmt ::= RETURN Expr 
| RETURN

StmtNoReturn ::= Assign
| IfStmt
| WhileStmt
| FunctionCall
| Block
| VarDeclr
| SEMICOLON

Stmt ::= ReturnStmt
| StmtNoReturn

// Function Declaration
FunctionDeclr ::= FunctionInit Block

FunctionDef ::= ID LPAREN ArgsTypeList RPAREN ReturnTypeList

ArgsTypeList ::= empty
| ID COLON ArgsType FArgsTypeList

FArgsTypeList ::= empty
| COMMA ID COLON ArgsType FArgsTypeList

ReturnTypeList ::= empty
| Type FTypeList

FReturnTypeList ::= empty
| COMMA Type FTypeList

ArgsType ::= INT
| BOOL
| CHAR
| ArgsType LBRACK RBRACK

// Use Declaration
UseDeclr ::= USE ID | UseDeclr SEMICOLON

// Program
Program ::= UseDeclarations FunctionDeclarations

UseDeclarations ::= empty
| UseDeclarations UseDeclr

FunctionDeclarations ::= empty
| FunctionDeclr FunctionDeclarations