
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326
//----------------------------------------------------

package parse;

import java_cup.runtime.*;
import java_cup.runtime.ComplexSymbolFactory.*;
import java.util.List;
import java.util.ArrayList;
import lex.*;
import ast.*;
import xic.XicException;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b 20150326 generated parser.
  */
public class IXiParser
 extends java_cup.runtime.lr_parser {

  @Override
  public final Class<?> getSymbolContainer() {
    return IXiSymbol.class;
  }

  /** Default constructor. */
  @Deprecated
  public IXiParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public IXiParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner and a SymbolFactory. */
  public IXiParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\020\000\002\002\004\000\002\002\010\000\002\002" +
    "\006\000\002\004\002\000\002\004\006\000\002\005\002" +
    "\000\002\005\007\000\002\006\004\000\002\007\002\000" +
    "\002\007\005\000\002\010\003\000\002\010\003\000\002" +
    "\010\005\000\002\003\002\000\002\003\004\000\002\011" +
    "\004" });

  /** Access to production table. */
  @Override
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\035\000\004\017\ufff4\001\002\000\004\017\010\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\006\002\ufff2\017\ufff3\001\002\000\004\007\011\001" +
    "\002\000\006\010\ufffe\017\013\001\002\000\004\010\030" +
    "\001\002\000\004\015\014\001\002\000\006\005\017\006" +
    "\015\001\002\000\014\002\ufff6\010\ufff6\011\ufff6\016\ufff6" +
    "\017\ufff6\001\002\000\010\010\ufffc\011\021\016\020\001" +
    "\002\000\014\002\ufff7\010\ufff7\011\ufff7\016\ufff7\017\ufff7" +
    "\001\002\000\004\017\024\001\002\000\004\012\023\001" +
    "\002\000\004\010\ufffd\001\002\000\014\002\ufff5\010\ufff5" +
    "\011\ufff5\016\ufff5\017\ufff5\001\002\000\004\015\025\001" +
    "\002\000\006\005\017\006\015\001\002\000\010\010\ufffc" +
    "\011\021\016\020\001\002\000\004\010\ufffb\001\002\000" +
    "\010\002\uffff\015\031\017\uffff\001\002\000\006\005\017" +
    "\006\015\001\002\000\012\002\ufff9\011\021\016\034\017" +
    "\ufff9\001\002\000\006\002\000\017\000\001\002\000\006" +
    "\005\017\006\015\001\002\000\006\002\ufffa\017\ufffa\001" +
    "\002\000\012\002\ufff9\011\021\016\034\017\ufff9\001\002" +
    "\000\006\002\ufff8\017\ufff8\001\002" });

  /** Access to parse-action table. */
  @Override
  public short[][] action_table() {return _action_table;}

  /** {@code reduce_goto} table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\035\000\006\003\003\011\004\001\001\000\004\002" +
    "\006\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\011\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\015\001\001" +
    "\000\002\001\001\000\004\005\021\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\010\025\001" +
    "\001\000\004\005\026\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\006\032\010\031\001\001\000\004\007" +
    "\034\001\001\000\002\001\001\000\004\010\035\001\001" +
    "\000\002\001\001\000\004\007\036\001\001\000\002\001" +
    "\001" });

  /** Access to {@code reduce_goto} table. */
  @Override
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$IXiParser$actions action_obj;

  /** Action encapsulation object initializer. */
  @Override
  protected void init_actions()
    {
      action_obj = new CUP$IXiParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  @Override
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack<java_cup.runtime.Symbol> stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$IXiParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  @Override
  public int start_state() {return 0;}
  /** Indicates start production. */
  @Override
  public int start_production() {return 0;}

  /** {@code EOF} Symbol index. */
  @Override
  public int EOF_sym() {return 0;}

  /** {@code error} Symbol index. */
  @Override
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  @Override
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lexer.nextToken(); 
    }



    /* Exposed Interface */

    //TODO: throw XicException
    public static Node from(String source, String unit) throws XicException {
        IXiLexer lexer = IXiLexer.from(source, unit);
        IXiParser parser = new IXiParser(lexer);
        
        try {
        	return parser.parse().value();
        } catch (XicException xic) {
        	throw xic;
        } catch (Exception e) {
        	throw ParseException.internal(e);
        }
    }

    /* Private Utility Functions */

    IXiLexer lexer;

    IXiParser(IXiLexer lexer) {
        super(lexer, lexer.getSymbolFactory());
        this.lexer = lexer;
    }

    public void unrecovered_syntax_error(Symbol cur_token) throws ParseException {
        done_parsing();
        ComplexSymbol sym = (ComplexSymbol) cur_token;
        throw new ParseException(sym);
    }

    public void syntax_error(Symbol cur_token) {}



/** Cup generated class to encapsulate user supplied action code.*/
class CUP$IXiParser$actions {
    private final IXiParser parser;

    /** Constructor */
    CUP$IXiParser$actions(IXiParser parser) {
        this.parser = parser;
    }

    /** Method with the actual generated action code for actions 0 to 15. */
    public final java_cup.runtime.Symbol CUP$IXiParser$do_action_part00000000(
            int                        CUP$IXiParser$act_num,
            java_cup.runtime.lr_parser CUP$IXiParser$parser,
            java.util.Stack<java_cup.runtime.Symbol> CUP$IXiParser$stack,
            int                        CUP$IXiParser$top)
            throws java.lang.Exception {
            /* Symbol object for return from actions */
            java_cup.runtime.Symbol CUP$IXiParser$result;

        /* select the action based on the action number */
        switch (CUP$IXiParser$act_num) {
        /*. . . . . . . . . . . . . . . . . . . .*/
        case 0: // $START ::= Interface EOF 
            {
                Object RESULT = null;
                Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$IXiParser$stack.elementAt(CUP$IXiParser$top-1)).xleft;
                Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$IXiParser$stack.elementAt(CUP$IXiParser$top-1)).xright;
                Node start_val = CUP$IXiParser$stack.elementAt(CUP$IXiParser$top-1).<Node> value();
                RESULT = start_val;
                CUP$IXiParser$result = parser.getSymbolFactory().newSymbol("$START",0, CUP$IXiParser$stack.elementAt(CUP$IXiParser$top-1), CUP$IXiParser$stack.peek(), RESULT);
            }
            /* ACCEPT */
            CUP$IXiParser$parser.done_parsing();
            return CUP$IXiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 1: // FnDef ::= IDENTIFIER LPAREN ArgsTypeList RPAREN COLON ReturnTypeList 
            {
                Node RESULT = null;
                Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$IXiParser$stack.elementAt(CUP$IXiParser$top-5)).xleft;
                Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$IXiParser$stack.elementAt(CUP$IXiParser$top-5)).xright;
                String id = CUP$IXiParser$stack.elementAt(CUP$IXiParser$top-5).<String> value();
                Location atlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$IXiParser$stack.elementAt(CUP$IXiParser$top-3)).xleft;
                Location atlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$IXiParser$stack.elementAt(CUP$IXiParser$top-3)).xright;
                List<Node> atl = CUP$IXiParser$stack.elementAt(CUP$IXiParser$top-3).<List<Node>> value();
                Location rtlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$IXiParser$stack.peek()).xleft;
                Location rtlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$IXiParser$stack.peek()).xright;
                List<Node> rtl = CUP$IXiParser$stack.peek().<List<Node>> value();
                
        RESULT = new Fn(idxleft, id, atl, rtl);
    
                CUP$IXiParser$result = parser.getSymbolFactory().newSymbol("FnDef",0, CUP$IXiParser$stack.elementAt(CUP$IXiParser$top-5), CUP$IXiParser$stack.peek(), RESULT);
            }
            return CUP$IXiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 2: // FnDef ::= IDENTIFIER LPAREN ArgsTypeList RPAREN 
            {
                Node RESULT = null;
                Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$IXiParser$stack.elementAt(CUP$IXiParser$top-3)).xleft;
                Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$IXiParser$stack.elementAt(CUP$IXiParser$top-3)).xright;
                String id = CUP$IXiParser$stack.elementAt(CUP$IXiParser$top-3).<String> value();
                Location atlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$IXiParser$stack.elementAt(CUP$IXiParser$top-1)).xleft;
                Location atlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$IXiParser$stack.elementAt(CUP$IXiParser$top-1)).xright;
                List<Node> atl = CUP$IXiParser$stack.elementAt(CUP$IXiParser$top-1).<List<Node>> value();
                
        RESULT = new Fn(idxleft, id, atl);
    
                CUP$IXiParser$result = parser.getSymbolFactory().newSymbol("FnDef",0, CUP$IXiParser$stack.elementAt(CUP$IXiParser$top-3), CUP$IXiParser$stack.peek(), RESULT);
            }
            return CUP$IXiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 3: // ArgsTypeList ::= 
            {
                List<Node> RESULT = null;
                
            RESULT = new ArrayList<Node>();
        
                CUP$IXiParser$result = parser.getSymbolFactory().newSymbol("ArgsTypeList",2, CUP$IXiParser$stack.peek(), RESULT);
            }
            return CUP$IXiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 4: // ArgsTypeList ::= IDENTIFIER COLON FnType FArgsTypeList 
            {
                List<Node> RESULT = null;
                Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$IXiParser$stack.elementAt(CUP$IXiParser$top-3)).xleft;
                Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$IXiParser$stack.elementAt(CUP$IXiParser$top-3)).xright;
                String id = CUP$IXiParser$stack.elementAt(CUP$IXiParser$top-3).<String> value();
                Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$IXiParser$stack.elementAt(CUP$IXiParser$top-1)).xleft;
                Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$IXiParser$stack.elementAt(CUP$IXiParser$top-1)).xright;
                Node type = CUP$IXiParser$stack.elementAt(CUP$IXiParser$top-1).<Node> value();
                Location atlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$IXiParser$stack.peek()).xleft;
                Location atlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$IXiParser$stack.peek()).xright;
                List<Node> atl = CUP$IXiParser$stack.peek().<List<Node>> value();
                
            atl.add(0, new Declare(idxleft, id, type));
            RESULT = atl;
        
                CUP$IXiParser$result = parser.getSymbolFactory().newSymbol("ArgsTypeList",2, CUP$IXiParser$stack.elementAt(CUP$IXiParser$top-3), CUP$IXiParser$stack.peek(), RESULT);
            }
            return CUP$IXiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 5: // FArgsTypeList ::= 
            {
                List<Node> RESULT = null;
                
            RESULT = new ArrayList<Node>();
        
                CUP$IXiParser$result = parser.getSymbolFactory().newSymbol("FArgsTypeList",3, CUP$IXiParser$stack.peek(), RESULT);
            }
            return CUP$IXiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 6: // FArgsTypeList ::= COMMA IDENTIFIER COLON FnType FArgsTypeList 
            {
                List<Node> RESULT = null;
                Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$IXiParser$stack.elementAt(CUP$IXiParser$top-3)).xleft;
                Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$IXiParser$stack.elementAt(CUP$IXiParser$top-3)).xright;
                String id = CUP$IXiParser$stack.elementAt(CUP$IXiParser$top-3).<String> value();
                Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$IXiParser$stack.elementAt(CUP$IXiParser$top-1)).xleft;
                Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$IXiParser$stack.elementAt(CUP$IXiParser$top-1)).xright;
                Node type = CUP$IXiParser$stack.elementAt(CUP$IXiParser$top-1).<Node> value();
                Location atlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$IXiParser$stack.peek()).xleft;
                Location atlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$IXiParser$stack.peek()).xright;
                List<Node> atl = CUP$IXiParser$stack.peek().<List<Node>> value();
                
            atl.add(0, new Declare(idxleft, id, type));
            RESULT = atl;
        
                CUP$IXiParser$result = parser.getSymbolFactory().newSymbol("FArgsTypeList",3, CUP$IXiParser$stack.elementAt(CUP$IXiParser$top-4), CUP$IXiParser$stack.peek(), RESULT);
            }
            return CUP$IXiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 7: // ReturnTypeList ::= FnType FReturnTypeList 
            {
                List<Node> RESULT = null;
                Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$IXiParser$stack.elementAt(CUP$IXiParser$top-1)).xleft;
                Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$IXiParser$stack.elementAt(CUP$IXiParser$top-1)).xright;
                Node type = CUP$IXiParser$stack.elementAt(CUP$IXiParser$top-1).<Node> value();
                Location rtlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$IXiParser$stack.peek()).xleft;
                Location rtlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$IXiParser$stack.peek()).xright;
                List<Node> rtl = CUP$IXiParser$stack.peek().<List<Node>> value();
                
            rtl.add(0, type);
            RESULT = rtl;
        
                CUP$IXiParser$result = parser.getSymbolFactory().newSymbol("ReturnTypeList",4, CUP$IXiParser$stack.elementAt(CUP$IXiParser$top-1), CUP$IXiParser$stack.peek(), RESULT);
            }
            return CUP$IXiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 8: // FReturnTypeList ::= 
            {
                List<Node> RESULT = null;
                
            RESULT = new ArrayList<Node>();
        
                CUP$IXiParser$result = parser.getSymbolFactory().newSymbol("FReturnTypeList",5, CUP$IXiParser$stack.peek(), RESULT);
            }
            return CUP$IXiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 9: // FReturnTypeList ::= COMMA FnType FReturnTypeList 
            {
                List<Node> RESULT = null;
                Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$IXiParser$stack.elementAt(CUP$IXiParser$top-1)).xleft;
                Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$IXiParser$stack.elementAt(CUP$IXiParser$top-1)).xright;
                Node type = CUP$IXiParser$stack.elementAt(CUP$IXiParser$top-1).<Node> value();
                Location rtlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$IXiParser$stack.peek()).xleft;
                Location rtlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$IXiParser$stack.peek()).xright;
                List<Node> rtl = CUP$IXiParser$stack.peek().<List<Node>> value();
                
            rtl.add(0, type);
            RESULT = rtl;
        
                CUP$IXiParser$result = parser.getSymbolFactory().newSymbol("FReturnTypeList",5, CUP$IXiParser$stack.elementAt(CUP$IXiParser$top-2), CUP$IXiParser$stack.peek(), RESULT);
            }
            return CUP$IXiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 10: // FnType ::= INT 
            {
                Node RESULT = null;
                Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$IXiParser$stack.peek()).xleft;
                Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$IXiParser$stack.peek()).xright;
                Object i = CUP$IXiParser$stack.peek().<Object> value();
                
            RESULT = new XiType(ixleft, "int");
        
                CUP$IXiParser$result = parser.getSymbolFactory().newSymbol("FnType",6, CUP$IXiParser$stack.peek(), CUP$IXiParser$stack.peek(), RESULT);
            }
            return CUP$IXiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 11: // FnType ::= BOOL 
            {
                Node RESULT = null;
                Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$IXiParser$stack.peek()).xleft;
                Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$IXiParser$stack.peek()).xright;
                Object b = CUP$IXiParser$stack.peek().<Object> value();
                
            RESULT = new XiType(bxleft, "bool");
        
                CUP$IXiParser$result = parser.getSymbolFactory().newSymbol("FnType",6, CUP$IXiParser$stack.peek(), CUP$IXiParser$stack.peek(), RESULT);
            }
            return CUP$IXiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 12: // FnType ::= FnType LBRACK RBRACK 
            {
                Node RESULT = null;
                Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$IXiParser$stack.elementAt(CUP$IXiParser$top-2)).xleft;
                Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$IXiParser$stack.elementAt(CUP$IXiParser$top-2)).xright;
                Node type = CUP$IXiParser$stack.elementAt(CUP$IXiParser$top-2).<Node> value();
                
            RESULT = new XiType(typexleft, type);
        
                CUP$IXiParser$result = parser.getSymbolFactory().newSymbol("FnType",6, CUP$IXiParser$stack.elementAt(CUP$IXiParser$top-2), CUP$IXiParser$stack.peek(), RESULT);
            }
            return CUP$IXiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 13: // FnDefList ::= 
            {
                List<Node> RESULT = null;
                
            RESULT = new ArrayList<Node>();
        
                CUP$IXiParser$result = parser.getSymbolFactory().newSymbol("FnDefList",1, CUP$IXiParser$stack.peek(), RESULT);
            }
            return CUP$IXiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 14: // FnDefList ::= FnDefList FnDef 
            {
                List<Node> RESULT = null;
                Location fdlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$IXiParser$stack.elementAt(CUP$IXiParser$top-1)).xleft;
                Location fdlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$IXiParser$stack.elementAt(CUP$IXiParser$top-1)).xright;
                List<Node> fdl = CUP$IXiParser$stack.elementAt(CUP$IXiParser$top-1).<List<Node>> value();
                Location fxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$IXiParser$stack.peek()).xleft;
                Location fxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$IXiParser$stack.peek()).xright;
                Node f = CUP$IXiParser$stack.peek().<Node> value();
                
            fdl.add(f);
            RESULT = fdl;
        
                CUP$IXiParser$result = parser.getSymbolFactory().newSymbol("FnDefList",1, CUP$IXiParser$stack.elementAt(CUP$IXiParser$top-1), CUP$IXiParser$stack.peek(), RESULT);
            }
            return CUP$IXiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 15: // Interface ::= FnDefList FnDef 
            {
                Node RESULT = null;
                Location fdlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$IXiParser$stack.elementAt(CUP$IXiParser$top-1)).xleft;
                Location fdlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$IXiParser$stack.elementAt(CUP$IXiParser$top-1)).xright;
                List<Node> fdl = CUP$IXiParser$stack.elementAt(CUP$IXiParser$top-1).<List<Node>> value();
                Location fxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$IXiParser$stack.peek()).xleft;
                Location fxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$IXiParser$stack.peek()).xright;
                Node f = CUP$IXiParser$stack.peek().<Node> value();
                
            fdl.add(f);
            RESULT = new Program(fdlxleft, fdl);
        
                CUP$IXiParser$result = parser.getSymbolFactory().newSymbol("Interface",7, CUP$IXiParser$stack.elementAt(CUP$IXiParser$top-1), CUP$IXiParser$stack.peek(), RESULT);
            }
            return CUP$IXiParser$result;

        /* . . . . . .*/
        default:
            throw new Exception(
                  "Invalid action number " + CUP$IXiParser$act_num + " found in internal parse table");

        }
    } /* end of method */

    /** Method splitting the generated action code into several parts. */
    public final java_cup.runtime.Symbol CUP$IXiParser$do_action(
            int                        CUP$IXiParser$act_num,
            java_cup.runtime.lr_parser CUP$IXiParser$parser,
            java.util.Stack<java_cup.runtime.Symbol> CUP$IXiParser$stack,
            int                        CUP$IXiParser$top)
            throws java.lang.Exception {
            return CUP$IXiParser$do_action_part00000000(
                           CUP$IXiParser$act_num,
                           CUP$IXiParser$parser,
                           CUP$IXiParser$stack,
                           CUP$IXiParser$top);
    }
}

}
