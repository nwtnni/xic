
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326
//----------------------------------------------------

package parse;

import java_cup.runtime.*;
import java_cup.runtime.ComplexSymbolFactory.*;
import java.util.List;
import java.util.ArrayList;
import lex.*;
import ast.*;
import xic.XicException;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b 20150326 generated parser.
  */
public class XiParser
 extends java_cup.runtime.lr_parser {

  @Override
  public final Class<?> getSymbolContainer() {
    return XiSymbol.class;
  }

  /** Default constructor. */
  @Deprecated
  public XiParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public XiParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner and a SymbolFactory. */
  public XiParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\152\000\002\002\004\000\002\053\002\000\002\053" +
    "\003\000\002\052\005\000\002\050\002\000\002\050\004" +
    "\000\002\047\005\000\002\051\002\000\002\051\004\000" +
    "\002\040\006\000\002\041\010\000\002\041\006\000\002" +
    "\042\002\000\002\042\006\000\002\043\002\000\002\043" +
    "\007\000\002\044\004\000\002\045\002\000\002\045\005" +
    "\000\002\046\003\000\002\046\003\000\002\046\005\000" +
    "\002\033\005\000\002\033\003\000\002\034\006\000\002" +
    "\034\003\000\002\003\002\000\002\003\004\000\002\004" +
    "\002\000\002\004\005\000\002\035\004\000\002\035\003" +
    "\000\002\035\003\000\002\035\004\000\002\035\004\000" +
    "\002\037\002\000\002\037\004\000\002\036\006\000\002" +
    "\036\003\000\002\005\006\000\002\006\002\000\002\006" +
    "\004\000\002\007\002\000\002\007\005\000\002\010\007" +
    "\000\002\010\007\000\002\011\002\000\002\011\006\000" +
    "\002\012\002\000\002\012\004\000\002\013\002\000\002" +
    "\013\003\000\002\013\005\000\002\014\005\000\002\015" +
    "\004\000\002\017\002\000\002\017\006\000\002\017\005" +
    "\000\002\020\002\000\002\020\005\000\002\016\003\000" +
    "\002\016\003\000\002\021\005\000\002\021\005\000\002" +
    "\026\006\000\002\027\002\000\002\027\005\000\002\023" +
    "\003\000\002\023\003\000\002\022\003\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\024\005\000" +
    "\002\025\004\000\002\030\005\000\002\031\006\000\002" +
    "\032\002\000\002\032\004\000\002\002\005\000\002\002" +
    "\004\000\002\002\004\000\002\002\005\000\002\002\005" +
    "\000\002\002\005\000\002\002\005\000\002\002\005\000" +
    "\002\002\005\000\002\002\005\000\002\002\005\000\002" +
    "\002\005\000\002\002\005\000\002\002\005\000\002\002" +
    "\005\000\002\002\005\000\002\002\005\000\002\002\003" +
    "\000\002\002\006\000\002\002\006\000\002\002\005\000" +
    "\002\002\003\000\002\002\003\000\002\002\003\000\002" +
    "\002\003\000\002\002\003\000\002\002\003" });

  /** Access to production table. */
  @Override
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\305\000\006\004\ufffd\051\ufffd\001\002\000\004\002" +
    "\307\001\002\000\006\004\007\051\012\001\002\000\004" +
    "\040\050\001\002\000\004\051\045\001\002\000\006\002" +
    "\ufffa\051\012\001\002\000\006\004\ufffc\051\ufffc\001\002" +
    "\000\004\034\013\001\002\000\006\035\ufff5\051\015\001" +
    "\002\000\004\035\032\001\002\000\004\043\016\001\002" +
    "\000\006\012\021\013\017\001\002\000\012\035\uffed\036" +
    "\uffed\040\uffed\045\uffed\001\002\000\010\035\ufff3\036\023" +
    "\045\022\001\002\000\012\035\uffee\036\uffee\040\uffee\045" +
    "\uffee\001\002\000\004\051\026\001\002\000\004\037\025" +
    "\001\002\000\004\035\ufff4\001\002\000\012\035\uffec\036" +
    "\uffec\040\uffec\045\uffec\001\002\000\004\043\027\001\002" +
    "\000\006\012\021\013\017\001\002\000\010\035\ufff3\036" +
    "\023\045\022\001\002\000\004\035\ufff2\001\002\000\006" +
    "\040\ufff6\043\033\001\002\000\006\012\021\013\017\001" +
    "\002\000\010\036\023\040\ufff0\045\036\001\002\000\004" +
    "\040\ufff7\001\002\000\006\012\021\013\017\001\002\000" +
    "\004\040\ufff1\001\002\000\010\036\023\040\ufff0\045\036" +
    "\001\002\000\004\040\uffef\001\002\000\004\002\ufffe\001" +
    "\002\000\006\002\ufffa\051\012\001\002\000\004\002\ufff9" +
    "\001\002\000\010\004\000\044\046\051\000\001\002\000" +
    "\024\004\uffff\005\uffff\006\uffff\007\uffff\010\uffff\040\uffff" +
    "\041\uffff\046\uffff\051\uffff\001\002\000\006\004\ufffb\051" +
    "\ufffb\001\002\000\020\005\072\006\066\010\uffde\040\073" +
    "\041\uffde\046\052\051\071\001\002\000\006\042\uffb9\045" +
    "\uffbd\001\002\000\006\042\uffbc\045\uffbe\001\002\000\006" +
    "\010\277\041\uffe8\001\002\000\026\005\000\006\000\007" +
    "\000\010\000\036\272\040\000\041\000\044\046\046\000" +
    "\051\000\001\002\000\004\041\271\001\002\000\004\042" +
    "\267\001\002\000\004\042\uffba\001\002\000\004\045\254" +
    "\001\002\000\004\042\252\001\002\000\020\005\uffdb\006" +
    "\uffdb\010\uffdb\040\uffdb\041\uffdb\046\uffdb\051\uffdb\001\002" +
    "\000\022\005\uffe2\006\uffe2\007\uffe2\010\uffe2\040\uffe2\041" +
    "\uffe2\046\uffe2\051\uffe2\001\002\000\022\005\uffe1\006\uffe1" +
    "\007\uffe1\010\uffe1\040\uffe1\041\uffe1\046\uffe1\051\uffe1\001" +
    "\002\000\024\005\000\006\000\007\000\010\000\040\000" +
    "\041\000\044\046\046\000\051\000\001\002\000\030\011" +
    "\077\015\100\023\105\034\102\040\113\047\103\050\110" +
    "\051\111\052\112\053\104\054\107\001\002\000\020\005" +
    "\072\006\066\010\uffde\040\073\041\uffde\046\052\051\071" +
    "\001\002\000\024\005\000\006\000\007\000\010\000\040" +
    "\000\041\000\044\046\046\000\051\000\001\002\000\012" +
    "\034\162\036\211\042\uffbb\043\212\001\002\000\030\011" +
    "\077\015\100\023\105\034\102\040\113\047\103\050\110" +
    "\051\111\052\112\053\104\054\107\001\002\000\020\005" +
    "\072\006\066\010\uffde\040\073\041\uffde\046\052\051\071" +
    "\001\002\000\004\041\075\001\002\000\022\005\000\006" +
    "\000\010\000\040\000\041\000\044\046\046\000\051\000" +
    "\001\002\000\020\005\uffdc\006\uffdc\010\uffdc\040\uffdc\041" +
    "\uffdc\046\uffdc\051\uffdc\001\002\000\004\034\206\001\002" +
    "\000\030\011\077\015\100\023\105\034\102\040\113\047" +
    "\103\050\110\051\111\052\112\053\104\054\107\001\002" +
    "\000\070\005\uffa1\006\uffa1\007\uffa1\010\uffa1\016\uffa1\017" +
    "\uffa1\020\uffa1\021\uffa1\022\uffa1\023\uffa1\024\uffa1\025\uffa1" +
    "\026\uffa1\027\uffa1\030\uffa1\031\uffa1\032\uffa1\033\uffa1\035" +
    "\uffa1\036\uffa1\037\uffa1\040\uffa1\041\uffa1\044\uffa1\045\uffa1" +
    "\046\uffa1\051\uffa1\001\002\000\030\011\077\015\100\023" +
    "\105\034\102\040\113\047\103\050\110\051\111\052\112" +
    "\053\104\054\107\001\002\000\070\005\uff9d\006\uff9d\007" +
    "\uff9d\010\uff9d\016\uff9d\017\uff9d\020\uff9d\021\uff9d\022\uff9d" +
    "\023\uff9d\024\uff9d\025\uff9d\026\uff9d\027\uff9d\030\uff9d\031" +
    "\uff9d\032\uff9d\033\uff9d\035\uff9d\036\uff9d\037\uff9d\040\uff9d" +
    "\041\uff9d\044\uff9d\045\uff9d\046\uff9d\051\uff9d\001\002\000" +
    "\070\005\uff9a\006\uff9a\007\uff9a\010\uff9a\016\uff9a\017\uff9a" +
    "\020\uff9a\021\uff9a\022\uff9a\023\uff9a\024\uff9a\025\uff9a\026" +
    "\uff9a\027\uff9a\030\uff9a\031\uff9a\032\uff9a\033\uff9a\035\uff9a" +
    "\036\uff9a\037\uff9a\040\uff9a\041\uff9a\044\uff9a\045\uff9a\046" +
    "\uff9a\051\uff9a\001\002\000\030\011\077\015\100\023\105" +
    "\034\102\040\113\047\103\050\110\051\111\052\112\053" +
    "\104\054\107\001\002\000\052\005\072\006\066\016\131" +
    "\017\120\020\127\021\121\022\117\023\126\024\136\025" +
    "\122\026\134\027\124\030\133\031\135\032\123\033\125" +
    "\036\132\040\174\046\052\051\071\001\002\000\070\005" +
    "\uff99\006\uff99\007\uff99\010\uff99\016\uff99\017\uff99\020\uff99" +
    "\021\uff99\022\uff99\023\uff99\024\uff99\025\uff99\026\uff99\027" +
    "\uff99\030\uff99\031\uff99\032\uff99\033\uff99\035\uff99\036\uff99" +
    "\037\uff99\040\uff99\041\uff99\044\uff99\045\uff99\046\uff99\051" +
    "\uff99\001\002\000\070\005\uff9c\006\uff9c\007\uff9c\010\uff9c" +
    "\016\uff9c\017\uff9c\020\uff9c\021\uff9c\022\uff9c\023\uff9c\024" +
    "\uff9c\025\uff9c\026\uff9c\027\uff9c\030\uff9c\031\uff9c\032\uff9c" +
    "\033\uff9c\035\uff9c\036\uff9c\037\uff9c\040\uff9c\041\uff9c\044" +
    "\uff9c\045\uff9c\046\uff9c\051\uff9c\001\002\000\072\005\uff98" +
    "\006\uff98\007\uff98\010\uff98\016\uff98\017\uff98\020\uff98\021" +
    "\uff98\022\uff98\023\uff98\024\uff98\025\uff98\026\uff98\027\uff98" +
    "\030\uff98\031\uff98\032\uff98\033\uff98\034\162\035\uff98\036" +
    "\uff98\037\uff98\040\uff98\041\uff98\044\uff98\045\uff98\046\uff98" +
    "\051\uff98\001\002\000\070\005\uff9b\006\uff9b\007\uff9b\010" +
    "\uff9b\016\uff9b\017\uff9b\020\uff9b\021\uff9b\022\uff9b\023\uff9b" +
    "\024\uff9b\025\uff9b\026\uff9b\027\uff9b\030\uff9b\031\uff9b\032" +
    "\uff9b\033\uff9b\035\uff9b\036\uff9b\037\uff9b\040\uff9b\041\uff9b" +
    "\044\uff9b\045\uff9b\046\uff9b\051\uff9b\001\002\000\032\011" +
    "\077\015\100\023\105\034\102\040\113\041\uffd1\047\103" +
    "\050\110\051\111\052\112\053\104\054\107\001\002\000" +
    "\004\041\161\001\002\000\044\016\131\017\120\020\127" +
    "\021\121\022\117\023\126\024\136\025\122\026\134\027" +
    "\124\030\133\031\135\032\123\033\125\036\132\041\uffcf" +
    "\045\116\001\002\000\032\011\077\015\100\023\105\034" +
    "\102\040\113\041\uffce\047\103\050\110\051\111\052\112" +
    "\053\104\054\107\001\002\000\030\011\077\015\100\023" +
    "\105\034\102\040\113\047\103\050\110\051\111\052\112" +
    "\053\104\054\107\001\002\000\030\011\077\015\100\023" +
    "\105\034\102\040\113\047\103\050\110\051\111\052\112" +
    "\053\104\054\107\001\002\000\030\011\077\015\100\023" +
    "\105\034\102\040\113\047\103\050\110\051\111\052\112" +
    "\053\104\054\107\001\002\000\030\011\077\015\100\023" +
    "\105\034\102\040\113\047\103\050\110\051\111\052\112" +
    "\053\104\054\107\001\002\000\030\011\077\015\100\023" +
    "\105\034\102\040\113\047\103\050\110\051\111\052\112" +
    "\053\104\054\107\001\002\000\030\011\077\015\100\023" +
    "\105\034\102\040\113\047\103\050\110\051\111\052\112" +
    "\053\104\054\107\001\002\000\030\011\077\015\100\023" +
    "\105\034\102\040\113\047\103\050\110\051\111\052\112" +
    "\053\104\054\107\001\002\000\030\011\077\015\100\023" +
    "\105\034\102\040\113\047\103\050\110\051\111\052\112" +
    "\053\104\054\107\001\002\000\030\011\077\015\100\023" +
    "\105\034\102\040\113\047\103\050\110\051\111\052\112" +
    "\053\104\054\107\001\002\000\004\041\uffd0\001\002\000" +
    "\030\011\077\015\100\023\105\034\102\040\113\047\103" +
    "\050\110\051\111\052\112\053\104\054\107\001\002\000" +
    "\030\011\077\015\100\023\105\034\102\040\113\047\103" +
    "\050\110\051\111\052\112\053\104\054\107\001\002\000" +
    "\030\011\077\015\100\023\105\034\102\040\113\047\103" +
    "\050\110\051\111\052\112\053\104\054\107\001\002\000" +
    "\030\011\077\015\100\023\105\034\102\040\113\047\103" +
    "\050\110\051\111\052\112\053\104\054\107\001\002\000" +
    "\030\011\077\015\100\023\105\034\102\040\113\047\103" +
    "\050\110\051\111\052\112\053\104\054\107\001\002\000" +
    "\030\011\077\015\100\023\105\034\102\040\113\047\103" +
    "\050\110\051\111\052\112\053\104\054\107\001\002\000" +
    "\070\005\uffa9\006\uffa9\007\uffa9\010\uffa9\016\131\017\120" +
    "\020\127\021\121\022\117\023\126\024\uffa9\025\uffa9\026" +
    "\uffa9\027\uffa9\030\uffa9\031\uffa9\032\uffa9\033\uffa9\035\uffa9" +
    "\036\132\037\uffa9\040\uffa9\041\uffa9\044\uffa9\045\uffa9\046" +
    "\uffa9\051\uffa9\001\002\000\070\005\uffa4\006\uffa4\007\uffa4" +
    "\010\uffa4\016\131\017\120\020\127\021\121\022\117\023" +
    "\126\024\136\025\122\026\134\027\124\030\uffa4\031\uffa4" +
    "\032\uffa4\033\uffa4\035\uffa4\036\132\037\uffa4\040\uffa4\041" +
    "\uffa4\044\uffa4\045\uffa4\046\uffa4\051\uffa4\001\002\000\070" +
    "\005\uffa7\006\uffa7\007\uffa7\010\uffa7\016\131\017\120\020" +
    "\127\021\121\022\117\023\126\024\uffa7\025\uffa7\026\uffa7" +
    "\027\uffa7\030\uffa7\031\uffa7\032\uffa7\033\uffa7\035\uffa7\036" +
    "\132\037\uffa7\040\uffa7\041\uffa7\044\uffa7\045\uffa7\046\uffa7" +
    "\051\uffa7\001\002\000\070\005\uffa5\006\uffa5\007\uffa5\010" +
    "\uffa5\016\131\017\120\020\127\021\121\022\117\023\126" +
    "\024\136\025\122\026\134\027\124\030\uffa5\031\uffa5\032" +
    "\uffa5\033\uffa5\035\uffa5\036\132\037\uffa5\040\uffa5\041\uffa5" +
    "\044\uffa5\045\uffa5\046\uffa5\051\uffa5\001\002\000\042\016" +
    "\131\017\120\020\127\021\121\022\117\023\126\024\136" +
    "\025\122\026\134\027\124\030\133\031\135\032\123\033" +
    "\125\036\132\037\144\001\002\000\070\005\uff9f\006\uff9f" +
    "\007\uff9f\010\uff9f\016\uff9f\017\uff9f\020\uff9f\021\uff9f\022" +
    "\uff9f\023\uff9f\024\uff9f\025\uff9f\026\uff9f\027\uff9f\030\uff9f" +
    "\031\uff9f\032\uff9f\033\uff9f\035\uff9f\036\uff9f\037\uff9f\040" +
    "\uff9f\041\uff9f\044\uff9f\045\uff9f\046\uff9f\051\uff9f\001\002" +
    "\000\070\005\uffaf\006\uffaf\007\uffaf\010\uffaf\016\uffaf\017" +
    "\uffaf\020\uffaf\021\uffaf\022\uffaf\023\uffaf\024\uffaf\025\uffaf" +
    "\026\uffaf\027\uffaf\030\uffaf\031\uffaf\032\uffaf\033\uffaf\035" +
    "\uffaf\036\132\037\uffaf\040\uffaf\041\uffaf\044\uffaf\045\uffaf" +
    "\046\uffaf\051\uffaf\001\002\000\070\005\uffad\006\uffad\007" +
    "\uffad\010\uffad\016\uffad\017\uffad\020\uffad\021\uffad\022\uffad" +
    "\023\uffad\024\uffad\025\uffad\026\uffad\027\uffad\030\uffad\031" +
    "\uffad\032\uffad\033\uffad\035\uffad\036\132\037\uffad\040\uffad" +
    "\041\uffad\044\uffad\045\uffad\046\uffad\051\uffad\001\002\000" +
    "\070\005\uffaa\006\uffaa\007\uffaa\010\uffaa\016\131\017\120" +
    "\020\127\021\121\022\uffaa\023\uffaa\024\uffaa\025\uffaa\026" +
    "\uffaa\027\uffaa\030\uffaa\031\uffaa\032\uffaa\033\uffaa\035\uffaa" +
    "\036\132\037\uffaa\040\uffaa\041\uffaa\044\uffaa\045\uffaa\046" +
    "\uffaa\051\uffaa\001\002\000\070\005\uffa2\006\uffa2\007\uffa2" +
    "\010\uffa2\016\131\017\120\020\127\021\121\022\117\023" +
    "\126\024\136\025\122\026\134\027\124\030\133\031\135" +
    "\032\123\033\uffa2\035\uffa2\036\132\037\uffa2\040\uffa2\041" +
    "\uffa2\044\uffa2\045\uffa2\046\uffa2\051\uffa2\001\002\000\070" +
    "\005\uffa6\006\uffa6\007\uffa6\010\uffa6\016\131\017\120\020" +
    "\127\021\121\022\117\023\126\024\uffa6\025\uffa6\026\uffa6" +
    "\027\uffa6\030\uffa6\031\uffa6\032\uffa6\033\uffa6\035\uffa6\036" +
    "\132\037\uffa6\040\uffa6\041\uffa6\044\uffa6\045\uffa6\046\uffa6" +
    "\051\uffa6\001\002\000\070\005\uffa3\006\uffa3\007\uffa3\010" +
    "\uffa3\016\131\017\120\020\127\021\121\022\117\023\126" +
    "\024\136\025\122\026\134\027\124\030\133\031\135\032" +
    "\uffa3\033\uffa3\035\uffa3\036\132\037\uffa3\040\uffa3\041\uffa3" +
    "\044\uffa3\045\uffa3\046\uffa3\051\uffa3\001\002\000\070\005" +
    "\uffa8\006\uffa8\007\uffa8\010\uffa8\016\131\017\120\020\127" +
    "\021\121\022\117\023\126\024\uffa8\025\uffa8\026\uffa8\027" +
    "\uffa8\030\uffa8\031\uffa8\032\uffa8\033\uffa8\035\uffa8\036\132" +
    "\037\uffa8\040\uffa8\041\uffa8\044\uffa8\045\uffa8\046\uffa8\051" +
    "\uffa8\001\002\000\070\005\uffac\006\uffac\007\uffac\010\uffac" +
    "\016\uffac\017\uffac\020\uffac\021\uffac\022\uffac\023\uffac\024" +
    "\uffac\025\uffac\026\uffac\027\uffac\030\uffac\031\uffac\032\uffac" +
    "\033\uffac\035\uffac\036\132\037\uffac\040\uffac\041\uffac\044" +
    "\uffac\045\uffac\046\uffac\051\uffac\001\002\000\070\005\uffae" +
    "\006\uffae\007\uffae\010\uffae\016\uffae\017\uffae\020\uffae\021" +
    "\uffae\022\uffae\023\uffae\024\uffae\025\uffae\026\uffae\027\uffae" +
    "\030\uffae\031\uffae\032\uffae\033\uffae\035\uffae\036\132\037" +
    "\uffae\040\uffae\041\uffae\044\uffae\045\uffae\046\uffae\051\uffae" +
    "\001\002\000\070\005\uffab\006\uffab\007\uffab\010\uffab\016" +
    "\131\017\120\020\127\021\121\022\uffab\023\uffab\024\uffab" +
    "\025\uffab\026\uffab\027\uffab\030\uffab\031\uffab\032\uffab\033" +
    "\uffab\035\uffab\036\132\037\uffab\040\uffab\041\uffab\044\uffab" +
    "\045\uffab\046\uffab\051\uffab\001\002\000\044\016\131\017" +
    "\120\020\127\021\121\022\117\023\126\024\136\025\122" +
    "\026\134\027\124\030\133\031\135\032\123\033\125\036" +
    "\132\041\uffcf\045\116\001\002\000\004\041\uffcd\001\002" +
    "\000\070\005\uff9e\006\uff9e\007\uff9e\010\uff9e\016\uff9e\017" +
    "\uff9e\020\uff9e\021\uff9e\022\uff9e\023\uff9e\024\uff9e\025\uff9e" +
    "\026\uff9e\027\uff9e\030\uff9e\031\uff9e\032\uff9e\033\uff9e\035" +
    "\uff9e\036\uff9e\037\uff9e\040\uff9e\041\uff9e\044\uff9e\045\uff9e" +
    "\046\uff9e\051\uff9e\001\002\000\032\011\077\015\100\023" +
    "\105\034\102\035\uffd9\040\113\047\103\050\110\051\111" +
    "\052\112\053\104\054\107\001\002\000\004\035\171\001" +
    "\002\000\044\016\131\017\120\020\127\021\121\022\117" +
    "\023\126\024\136\025\122\026\134\027\124\030\133\031" +
    "\135\032\123\033\125\035\uffd7\036\132\045\165\001\002" +
    "\000\030\011\077\015\100\023\105\034\102\040\113\047" +
    "\103\050\110\051\111\052\112\053\104\054\107\001\002" +
    "\000\004\035\uffd8\001\002\000\044\016\131\017\120\020" +
    "\127\021\121\022\117\023\126\024\136\025\122\026\134" +
    "\027\124\030\133\031\135\032\123\033\125\035\uffd7\036" +
    "\132\045\165\001\002\000\004\035\uffd6\001\002\000\070" +
    "\005\uffda\006\uffda\007\uffda\010\uffda\016\uffda\017\uffda\020" +
    "\uffda\021\uffda\022\uffda\023\uffda\024\uffda\025\uffda\026\uffda" +
    "\027\uffda\030\uffda\031\uffda\032\uffda\033\uffda\035\uffda\036" +
    "\uffda\037\uffda\040\uffda\041\uffda\044\uffda\045\uffda\046\uffda" +
    "\051\uffda\001\002\000\022\005\uffea\006\uffea\007\uffea\010" +
    "\uffea\040\uffea\041\uffea\046\uffea\051\uffea\001\002\000\022" +
    "\005\uffb4\006\uffb4\007\200\010\uffb4\040\uffb4\041\uffb4\046" +
    "\uffb4\051\uffb4\001\002\000\020\005\072\006\066\010\uffde" +
    "\040\073\041\uffde\046\052\051\071\001\002\000\004\041" +
    "\176\001\002\000\022\005\uffeb\006\uffeb\007\uffeb\010\uffeb" +
    "\040\uffeb\041\uffeb\046\uffeb\051\uffeb\001\002\000\022\005" +
    "\uffb5\006\uffb5\007\uffb5\010\uffb5\040\uffb5\041\uffb5\046\uffb5" +
    "\051\uffb5\001\002\000\014\005\072\006\066\040\174\046" +
    "\052\051\071\001\002\000\022\005\uffb3\006\uffb3\007\uffb3" +
    "\010\uffb3\040\uffb3\041\uffb3\046\uffb3\051\uffb3\001\002\000" +
    "\070\005\uffb0\006\uffb0\007\uffb0\010\uffb0\016\uffb0\017\uffb0" +
    "\020\uffb0\021\uffb0\022\uffb0\023\uffb0\024\uffb0\025\uffb0\026" +
    "\uffb0\027\uffb0\030\uffb0\031\uffb0\032\uffb0\033\uffb0\035\uffb0" +
    "\036\132\037\uffb0\040\uffb0\041\uffb0\044\uffb0\045\uffb0\046" +
    "\uffb0\051\uffb0\001\002\000\042\016\131\017\120\020\127" +
    "\021\121\022\117\023\126\024\136\025\122\026\134\027" +
    "\124\030\133\031\135\032\123\033\125\035\204\036\132" +
    "\001\002\000\070\005\uffb2\006\uffb2\007\uffb2\010\uffb2\016" +
    "\uffb2\017\uffb2\020\uffb2\021\uffb2\022\uffb2\023\uffb2\024\uffb2" +
    "\025\uffb2\026\uffb2\027\uffb2\030\uffb2\031\uffb2\032\uffb2\033" +
    "\uffb2\035\uffb2\036\uffb2\037\uffb2\040\uffb2\041\uffb2\044\uffb2" +
    "\045\uffb2\046\uffb2\051\uffb2\001\002\000\070\005\uffb1\006" +
    "\uffb1\007\uffb1\010\uffb1\016\uffb1\017\uffb1\020\uffb1\021\uffb1" +
    "\022\uffb1\023\uffb1\024\uffb1\025\uffb1\026\uffb1\027\uffb1\030" +
    "\uffb1\031\uffb1\032\uffb1\033\uffb1\035\uffb1\036\132\037\uffb1" +
    "\040\uffb1\041\uffb1\044\uffb1\045\uffb1\046\uffb1\051\uffb1\001" +
    "\002\000\030\011\077\015\100\023\105\034\102\040\113" +
    "\047\103\050\110\051\111\052\112\053\104\054\107\001" +
    "\002\000\042\016\131\017\120\020\127\021\121\022\117" +
    "\023\126\024\136\025\122\026\134\027\124\030\133\031" +
    "\135\032\123\033\125\035\210\036\132\001\002\000\070" +
    "\005\uffa0\006\uffa0\007\uffa0\010\uffa0\016\uffa0\017\uffa0\020" +
    "\uffa0\021\uffa0\022\uffa0\023\uffa0\024\uffa0\025\uffa0\026\uffa0" +
    "\027\uffa0\030\uffa0\031\uffa0\032\uffa0\033\uffa0\035\uffa0\036" +
    "\uffa0\037\uffa0\040\uffa0\041\uffa0\044\uffa0\045\uffa0\046\uffa0" +
    "\051\uffa0\001\002\000\030\011\077\015\100\023\105\034" +
    "\102\040\113\047\103\050\110\051\111\052\112\053\104" +
    "\054\107\001\002\000\006\012\217\013\214\001\002\000" +
    "\032\005\uffca\006\uffca\007\uffca\010\uffca\036\220\040\uffca" +
    "\041\uffca\042\uffc7\044\uffca\045\uffc7\046\uffca\051\uffca\001" +
    "\002\000\032\005\uffc4\006\uffc4\007\uffc4\010\uffc4\036\uffc4" +
    "\040\uffc4\041\uffc4\042\uffc4\044\uffc4\045\uffc4\046\uffc4\051" +
    "\uffc4\001\002\000\006\042\uffb8\045\uffb8\001\002\000\024" +
    "\005\uffcc\006\uffcc\007\uffcc\010\uffcc\040\uffcc\041\uffcc\044" +
    "\uffcc\046\uffcc\051\uffcc\001\002\000\032\005\uffc5\006\uffc5" +
    "\007\uffc5\010\uffc5\036\uffc5\040\uffc5\041\uffc5\042\uffc5\044" +
    "\uffc5\045\uffc5\046\uffc5\051\uffc5\001\002\000\032\011\077" +
    "\015\100\023\105\034\102\037\223\040\113\047\103\050" +
    "\110\051\111\052\112\053\104\054\107\001\002\000\006" +
    "\042\uffb7\045\uffb7\001\002\000\024\005\uffcb\006\uffcb\007" +
    "\uffcb\010\uffcb\040\uffcb\041\uffcb\044\uffcb\046\uffcb\051\uffcb" +
    "\001\002\000\032\005\uffc7\006\uffc7\007\uffc7\010\uffc7\036" +
    "\231\040\uffc7\041\uffc7\042\uffc7\044\uffc7\045\uffc7\046\uffc7" +
    "\051\uffc7\001\002\000\042\016\131\017\120\020\127\021" +
    "\121\022\117\023\126\024\136\025\122\026\134\027\124" +
    "\030\133\031\135\032\123\033\125\036\132\037\225\001" +
    "\002\000\026\005\uffca\006\uffca\007\uffca\010\uffca\036\226" +
    "\040\uffca\041\uffca\044\uffca\046\uffca\051\uffca\001\002\000" +
    "\032\011\077\015\100\023\105\034\102\037\230\040\113" +
    "\047\103\050\110\051\111\052\112\053\104\054\107\001" +
    "\002\000\024\005\uffc9\006\uffc9\007\uffc9\010\uffc9\040\uffc9" +
    "\041\uffc9\044\uffc9\046\uffc9\051\uffc9\001\002\000\026\005" +
    "\uffc7\006\uffc7\007\uffc7\010\uffc7\036\231\040\uffc7\041\uffc7" +
    "\044\uffc7\046\uffc7\051\uffc7\001\002\000\004\037\233\001" +
    "\002\000\024\005\uffc8\006\uffc8\007\uffc8\010\uffc8\040\uffc8" +
    "\041\uffc8\044\uffc8\046\uffc8\051\uffc8\001\002\000\032\005" +
    "\uffc7\006\uffc7\007\uffc7\010\uffc7\036\231\040\uffc7\041\uffc7" +
    "\042\uffc7\044\uffc7\045\uffc7\046\uffc7\051\uffc7\001\002\000" +
    "\030\005\uffc6\006\uffc6\007\uffc6\010\uffc6\040\uffc6\041\uffc6" +
    "\042\uffc6\044\uffc6\045\uffc6\046\uffc6\051\uffc6\001\002\000" +
    "\030\005\uffc8\006\uffc8\007\uffc8\010\uffc8\040\uffc8\041\uffc8" +
    "\042\uffc6\044\uffc8\045\uffc6\046\uffc8\051\uffc8\001\002\000" +
    "\042\016\131\017\120\020\127\021\121\022\117\023\126" +
    "\024\136\025\122\026\134\027\124\030\133\031\135\032" +
    "\123\033\125\036\132\037\237\001\002\000\006\036\240" +
    "\042\uffd3\001\002\000\030\011\077\015\100\023\105\034" +
    "\102\040\113\047\103\050\110\051\111\052\112\053\104" +
    "\054\107\001\002\000\004\042\uffd4\001\002\000\042\016" +
    "\131\017\120\020\127\021\121\022\117\023\126\024\136" +
    "\025\122\026\134\027\124\030\133\031\135\032\123\033" +
    "\125\036\132\037\243\001\002\000\006\036\240\042\uffd3" +
    "\001\002\000\004\042\uffd2\001\002\000\022\005\uffe3\006" +
    "\uffe3\007\uffe3\010\uffe3\040\uffe3\041\uffe3\046\uffe3\051\uffe3" +
    "\001\002\000\006\010\uffdd\041\uffdd\001\002\000\052\005" +
    "\072\006\066\016\131\017\120\020\127\021\121\022\117" +
    "\023\126\024\136\025\122\026\134\027\124\030\133\031" +
    "\135\032\123\033\125\036\132\040\174\046\052\051\071" +
    "\001\002\000\022\005\uffb6\006\uffb6\007\uffb6\010\uffb6\040" +
    "\uffb6\041\uffb6\046\uffb6\051\uffb6\001\002\000\022\005\uffdf" +
    "\006\uffdf\007\uffdf\010\uffdf\040\uffdf\041\uffdf\046\uffdf\051" +
    "\uffdf\001\002\000\030\011\077\015\100\023\105\034\102" +
    "\040\113\047\103\050\110\051\111\052\112\053\104\054" +
    "\107\001\002\000\062\005\uffc3\006\uffc3\007\uffc3\010\uffc3" +
    "\016\131\017\120\020\127\021\121\022\117\023\126\024" +
    "\136\025\122\026\134\027\124\030\133\031\135\032\123" +
    "\033\125\036\132\040\uffc3\041\uffc3\044\uffc3\046\uffc3\051" +
    "\uffc3\001\002\000\006\046\256\051\257\001\002\000\006" +
    "\042\uffbd\045\uffbd\001\002\000\006\042\uffbe\045\uffbe\001" +
    "\002\000\004\043\265\001\002\000\006\042\uffc0\045\261" +
    "\001\002\000\006\046\256\051\257\001\002\000\004\042" +
    "\uffc1\001\002\000\006\042\uffc0\045\261\001\002\000\004" +
    "\042\uffbf\001\002\000\006\012\217\013\214\001\002\000" +
    "\010\036\231\042\uffc7\045\uffc7\001\002\000\030\011\077" +
    "\015\100\023\105\034\102\040\113\047\103\050\110\051" +
    "\111\052\112\053\104\054\107\001\002\000\062\005\uffc2" +
    "\006\uffc2\007\uffc2\010\uffc2\016\131\017\120\020\127\021" +
    "\121\022\117\023\126\024\136\025\122\026\134\027\124" +
    "\030\133\031\135\032\123\033\125\036\132\040\uffc2\041" +
    "\uffc2\044\uffc2\046\uffc2\051\uffc2\001\002\000\006\002\ufff8" +
    "\051\ufff8\001\002\000\030\011\077\015\100\023\105\034" +
    "\102\040\113\047\103\050\110\051\111\052\112\053\104" +
    "\054\107\001\002\000\022\005\uffe0\006\uffe0\007\uffe0\010" +
    "\uffe0\040\uffe0\041\uffe0\046\uffe0\051\uffe0\001\002\000\042" +
    "\016\131\017\120\020\127\021\121\022\117\023\126\024" +
    "\136\025\122\026\134\027\124\030\133\031\135\032\123" +
    "\033\125\036\132\037\275\001\002\000\006\036\240\042" +
    "\uffd3\001\002\000\004\042\uffd5\001\002\000\034\011\077" +
    "\015\100\023\105\034\102\040\113\041\uffe7\044\uffe7\047" +
    "\103\050\110\051\111\052\112\053\104\054\107\001\002" +
    "\000\046\016\131\017\120\020\127\021\121\022\117\023" +
    "\126\024\136\025\122\026\134\027\124\030\133\031\135" +
    "\032\123\033\125\036\132\041\uffe5\044\uffe5\045\303\001" +
    "\002\000\006\041\000\044\046\001\002\000\004\041\uffe9" +
    "\001\002\000\030\011\077\015\100\023\105\034\102\040" +
    "\113\047\103\050\110\051\111\052\112\053\104\054\107" +
    "\001\002\000\006\041\uffe6\044\uffe6\001\002\000\046\016" +
    "\131\017\120\020\127\021\121\022\117\023\126\024\136" +
    "\025\122\026\134\027\124\030\133\031\135\032\123\033" +
    "\125\036\132\041\uffe5\044\uffe5\045\303\001\002\000\006" +
    "\041\uffe4\044\uffe4\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  @Override
  public short[][] action_table() {return _action_table;}

  /** {@code reduce_goto} table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\305\000\006\050\004\052\003\001\001\000\002\001" +
    "\001\000\010\040\007\041\005\047\010\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\040\042\041\005\051" +
    "\041\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\042\013\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\046\017\001\001\000\002\001\001\000\004\043\023" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\046\027\001\001\000\004\043\030\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\044\034\046\033" +
    "\001\001\000\004\045\036\001\001\000\002\001\001\000" +
    "\004\046\037\001\001\000\002\001\001\000\004\045\040" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\040" +
    "\042\041\005\051\043\001\001\000\002\001\001\000\004" +
    "\053\046\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\005\053\010\056\014\064\021\067\022\055\023\057" +
    "\024\050\026\060\030\063\031\062\034\054\035\061\036" +
    "\066\037\052\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\053\272\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\053\250\001\001\000\006\002\246" +
    "\005\100\001\001\000\034\005\053\010\056\014\064\021" +
    "\067\022\055\023\057\024\050\026\060\030\063\031\062" +
    "\035\061\036\066\037\245\001\001\000\004\053\244\001" +
    "\001\000\002\001\001\000\006\002\105\005\100\001\001" +
    "\000\036\005\053\010\056\014\064\021\067\022\055\023" +
    "\057\024\050\026\060\030\063\031\062\034\073\035\061" +
    "\036\066\037\052\001\001\000\002\001\001\000\004\053" +
    "\075\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\002\204\005\100\001\001\000\002\001\001\000\006\002" +
    "\202\005\100\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\002\201\005\100\001\001\000\032\005\053\010" +
    "\056\014\064\021\067\022\055\023\057\024\050\026\060" +
    "\030\063\031\062\033\172\035\171\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\002\114\005\100\012\113\001\001\000\002\001" +
    "\001\000\004\013\127\001\001\000\006\002\156\005\100" +
    "\001\001\000\006\002\155\005\100\001\001\000\006\002" +
    "\154\005\100\001\001\000\006\002\153\005\100\001\001" +
    "\000\006\002\152\005\100\001\001\000\006\002\151\005" +
    "\100\001\001\000\006\002\150\005\100\001\001\000\006" +
    "\002\147\005\100\001\001\000\006\002\146\005\100\001" +
    "\001\000\006\002\145\005\100\001\001\000\002\001\001" +
    "\000\006\002\144\005\100\001\001\000\006\002\142\005" +
    "\100\001\001\000\006\002\141\005\100\001\001\000\006" +
    "\002\140\005\100\001\001\000\006\002\137\005\100\001" +
    "\001\000\006\002\136\005\100\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\157\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\002\163" +
    "\005\100\006\162\001\001\000\002\001\001\000\004\007" +
    "\165\001\001\000\006\002\166\005\100\001\001\000\002" +
    "\001\001\000\004\007\167\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\032\176\001\001" +
    "\000\036\005\053\010\056\014\064\021\067\022\055\023" +
    "\057\024\050\026\060\030\063\031\062\034\174\035\061" +
    "\036\066\037\052\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\005\053\010\056\014\064" +
    "\021\067\022\055\023\057\024\050\026\060\030\063\031" +
    "\062\033\200\035\171\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\002\206\005\100\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\002\235\005\100\001\001\000" +
    "\010\015\215\016\212\025\214\001\001\000\006\017\221" +
    "\020\220\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\002\223\005\100" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\234\001\001\000\002\001\001\000\004\017\226\001\001" +
    "\000\006\002\223\005\100\001\001\000\002\001\001\000" +
    "\004\020\231\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\233\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\240\001\001\000\006" +
    "\002\241\005\100\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\243\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\005\053\010\056\014" +
    "\064\021\067\022\055\023\057\024\050\026\060\030\063" +
    "\031\062\033\247\035\171\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\002\252\005\100\001\001\000\002" +
    "\001\001\000\006\023\257\024\254\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\027\261" +
    "\001\001\000\006\023\262\024\254\001\001\000\002\001" +
    "\001\000\004\027\263\001\001\000\002\001\001\000\006" +
    "\016\265\025\214\001\001\000\004\020\220\001\001\000" +
    "\006\002\267\005\100\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\002\273\005\100\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\275\001\001\000\002" +
    "\001\001\000\010\002\277\003\300\005\100\001\001\000" +
    "\004\004\303\001\001\000\004\053\301\001\001\000\002" +
    "\001\001\000\006\002\304\005\100\001\001\000\002\001" +
    "\001\000\004\004\305\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to {@code reduce_goto} table. */
  @Override
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$XiParser$actions action_obj;

  /** Action encapsulation object initializer. */
  @Override
  protected void init_actions()
    {
      action_obj = new CUP$XiParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  @Override
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack<java_cup.runtime.Symbol> stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$XiParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  @Override
  public int start_state() {return 0;}
  /** Indicates start production. */
  @Override
  public int start_production() {return 0;}

  /** {@code EOF} Symbol index. */
  @Override
  public int EOF_sym() {return 0;}

  /** {@code error} Symbol index. */
  @Override
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  @Override
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lexer.nextToken(); 
    }



    /* Exposed Interface */

    //TODO: throw XicException
    public static Node from(String source, String unit) throws XicException {
        XiLexer lexer = XiLexer.from(source, unit);
        XiParser parser = new XiParser(lexer);
        
        try {
        	return parser.parse().value();
        } catch (XicException xic) {
        	throw xic;
        } catch (Exception e) {
        	throw ParseException.internal(e);
        }
    }

    /* Private Utility Functions */

    private XiLexer lexer;

    private XiParser(XiLexer lexer) {
        super(lexer, lexer.getSymbolFactory());
        this.lexer = lexer;
    }

    public void unrecovered_syntax_error(Symbol cur_token) throws ParseException {
        done_parsing();
        ComplexSymbol sym = (ComplexSymbol) cur_token;
        throw new ParseException(sym);
    }

    public void syntax_error(Symbol cur_token) {}

    private Node evalInt(TempInt expr, boolean negate) throws ParseException {
        try {
            String orig = expr.literal;
            if (negate) {
                expr.literal = "-" + expr.literal;
            }
            return new XiInt(expr.location, Long.valueOf(expr.literal), orig, negate);
        } catch (NumberFormatException ex) {
            throw ParseException.numberFormatException(expr.location, expr.literal);
        }
    }

    private Node evalExpr(Node expr) throws ParseException {
        if (expr instanceof TempInt) {
            return evalInt((TempInt) expr, false);
        }
        return expr;
    }

    private Node evalNegExpr(Location l, Node expr) throws ParseException {
        if (expr instanceof TempInt) {
            expr.location = l;
            return evalInt((TempInt) expr, true);
        }
        return new Unary(l, Unary.Kind.INEGATE, expr);
    }



/** Cup generated class to encapsulate user supplied action code.*/
class CUP$XiParser$actions {
    private final XiParser parser;

    /** Constructor */
    CUP$XiParser$actions(XiParser parser) {
        this.parser = parser;
    }

    /** Method with the actual generated action code for actions 0 to 105. */
    public final java_cup.runtime.Symbol CUP$XiParser$do_action_part00000000(
            int                        CUP$XiParser$act_num,
            java_cup.runtime.lr_parser CUP$XiParser$parser,
            java.util.Stack<java_cup.runtime.Symbol> CUP$XiParser$stack,
            int                        CUP$XiParser$top)
            throws java.lang.Exception {
            /* Symbol object for return from actions */
            java_cup.runtime.Symbol CUP$XiParser$result;

        /* select the action based on the action number */
        switch (CUP$XiParser$act_num) {
        /*. . . . . . . . . . . . . . . . . . . .*/
        case 0: // $START ::= Program EOF 
            {
                Object RESULT = null;
                Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xleft;
                Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xright;
                Node start_val = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).<Node> value();
                RESULT = start_val;
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("$START",0, CUP$XiParser$stack.elementAt(CUP$XiParser$top-1), CUP$XiParser$stack.peek(), RESULT);
            }
            /* ACCEPT */
            CUP$XiParser$parser.done_parsing();
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 1: // OptSemicolon ::= 
            {
                Object RESULT = null;

                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("OptSemicolon",41, CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 2: // OptSemicolon ::= SEMICOLON 
            {
                Object RESULT = null;

                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("OptSemicolon",41, CUP$XiParser$stack.peek(), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 3: // Program ::= UseDeclarations FnDeclr FnDeclarations 
            {
                Node RESULT = null;
                Location udsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xleft;
                Location udsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xright;
                List<Node> uds = CUP$XiParser$stack.elementAt(CUP$XiParser$top-2).<List<Node>> value();
                Location fxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xleft;
                Location fxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xright;
                Node f = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).<Node> value();
                Location fdsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location fdsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                List<Node> fds = CUP$XiParser$stack.peek().<List<Node>> value();
                
        fds.add(0,f);
        RESULT = new Program(udsxleft, uds, fds);
    
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("Program",40, CUP$XiParser$stack.elementAt(CUP$XiParser$top-2), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 4: // UseDeclarations ::= 
            {
                List<Node> RESULT = null;
                
        RESULT = new ArrayList<Node>();
    
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("UseDeclarations",38, CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 5: // UseDeclarations ::= UseDeclarations UseDeclr 
            {
                List<Node> RESULT = null;
                Location udsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xleft;
                Location udsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xright;
                List<Node> uds = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).<List<Node>> value();
                Location uxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location uxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                Node u = CUP$XiParser$stack.peek().<Node> value();
                
        uds.add(u);
        RESULT = uds;
    
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("UseDeclarations",38, CUP$XiParser$stack.elementAt(CUP$XiParser$top-1), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 6: // UseDeclr ::= USE IDENTIFIER OptSemicolon 
            {
                Node RESULT = null;
                Location uxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xleft;
                Location uxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xright;
                Object u = CUP$XiParser$stack.elementAt(CUP$XiParser$top-2).<Object> value();
                Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xleft;
                Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xright;
                String id = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).<String> value();
                
        RESULT = new Use(uxleft, id);
    
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("UseDeclr",37, CUP$XiParser$stack.elementAt(CUP$XiParser$top-2), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 7: // FnDeclarations ::= 
            {
                List<Node> RESULT = null;
                
        RESULT = new ArrayList<Node>();
    
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("FnDeclarations",39, CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 8: // FnDeclarations ::= FnDeclr FnDeclarations 
            {
                List<Node> RESULT = null;
                Location fxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xleft;
                Location fxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xright;
                Node f = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).<Node> value();
                Location fdsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location fdsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                List<Node> fds = CUP$XiParser$stack.peek().<List<Node>> value();
                
        fds.add(0, f);
        RESULT = fds;
    
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("FnDeclarations",39, CUP$XiParser$stack.elementAt(CUP$XiParser$top-1), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 9: // FnDeclr ::= FnDef LBRACE BlockStmts RBRACE 
            {
                Node RESULT = null;
                Location defxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-3)).xleft;
                Location defxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-3)).xright;
                Node def = CUP$XiParser$stack.elementAt(CUP$XiParser$top-3).<Node> value();
                Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xleft;
                Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xright;
                Object l = CUP$XiParser$stack.elementAt(CUP$XiParser$top-2).<Object> value();
                Location blockxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xleft;
                Location blockxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xright;
                Node block = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).<Node> value();
                
        //TODO because only 1 lookahead--is it possible to refactor?
        block.location = lxleft;

        RESULT = new Fn(defxleft, (Fn) def, block);
    
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("FnDeclr",30, CUP$XiParser$stack.elementAt(CUP$XiParser$top-3), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 10: // FnDef ::= IDENTIFIER LPAREN ArgsTypeList RPAREN COLON ReturnTypeList 
            {
                Node RESULT = null;
                Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-5)).xleft;
                Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-5)).xright;
                String id = CUP$XiParser$stack.elementAt(CUP$XiParser$top-5).<String> value();
                Location atlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-3)).xleft;
                Location atlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-3)).xright;
                List<Node> atl = CUP$XiParser$stack.elementAt(CUP$XiParser$top-3).<List<Node>> value();
                Location rtlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location rtlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                List<Node> rtl = CUP$XiParser$stack.peek().<List<Node>> value();
                
        RESULT = new Fn(idxleft, id, atl, rtl);
    
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("FnDef",31, CUP$XiParser$stack.elementAt(CUP$XiParser$top-5), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 11: // FnDef ::= IDENTIFIER LPAREN ArgsTypeList RPAREN 
            {
                Node RESULT = null;
                Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-3)).xleft;
                Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-3)).xright;
                String id = CUP$XiParser$stack.elementAt(CUP$XiParser$top-3).<String> value();
                Location atlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xleft;
                Location atlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xright;
                List<Node> atl = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).<List<Node>> value();
                
        RESULT = new Fn(idxleft, id, atl);
    
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("FnDef",31, CUP$XiParser$stack.elementAt(CUP$XiParser$top-3), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 12: // ArgsTypeList ::= 
            {
                List<Node> RESULT = null;
                
        RESULT = new ArrayList<Node>();
    
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("ArgsTypeList",32, CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 13: // ArgsTypeList ::= IDENTIFIER COLON FnType FArgsTypeList 
            {
                List<Node> RESULT = null;
                Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-3)).xleft;
                Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-3)).xright;
                String id = CUP$XiParser$stack.elementAt(CUP$XiParser$top-3).<String> value();
                Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xleft;
                Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xright;
                Node type = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).<Node> value();
                Location fatlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location fatlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                List<Node> fatl = CUP$XiParser$stack.peek().<List<Node>> value();
                
        fatl.add(0, new Declare(idxleft, id, type));
        RESULT = fatl;
    
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("ArgsTypeList",32, CUP$XiParser$stack.elementAt(CUP$XiParser$top-3), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 14: // FArgsTypeList ::= 
            {
                List<Node> RESULT = null;
                
        RESULT = new ArrayList<Node>();
    
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("FArgsTypeList",33, CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 15: // FArgsTypeList ::= COMMA IDENTIFIER COLON FnType FArgsTypeList 
            {
                List<Node> RESULT = null;
                Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-3)).xleft;
                Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-3)).xright;
                String id = CUP$XiParser$stack.elementAt(CUP$XiParser$top-3).<String> value();
                Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xleft;
                Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xright;
                Node type = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).<Node> value();
                Location fatlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location fatlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                List<Node> fatl = CUP$XiParser$stack.peek().<List<Node>> value();
                
        fatl.add(0, new Declare(idxleft, id, type));
        RESULT = fatl;
    
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("FArgsTypeList",33, CUP$XiParser$stack.elementAt(CUP$XiParser$top-4), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 16: // ReturnTypeList ::= FnType FReturnTypeList 
            {
                List<Node> RESULT = null;
                Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xleft;
                Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xright;
                Node type = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).<Node> value();
                Location frtlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location frtlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                List<Node> frtl = CUP$XiParser$stack.peek().<List<Node>> value();
                
        frtl.add(0, type);
        RESULT = frtl;
    
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("ReturnTypeList",34, CUP$XiParser$stack.elementAt(CUP$XiParser$top-1), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 17: // FReturnTypeList ::= 
            {
                List<Node> RESULT = null;
                
        RESULT = new ArrayList<Node>();
    
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("FReturnTypeList",35, CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 18: // FReturnTypeList ::= COMMA FnType FReturnTypeList 
            {
                List<Node> RESULT = null;
                Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xleft;
                Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xright;
                Node type = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).<Node> value();
                Location frtlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location frtlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                List<Node> frtl = CUP$XiParser$stack.peek().<List<Node>> value();
                
        frtl.add(0, type);
        RESULT = frtl;
    
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("FReturnTypeList",35, CUP$XiParser$stack.elementAt(CUP$XiParser$top-2), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 19: // FnType ::= INT 
            {
                Node RESULT = null;
                Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                Object i = CUP$XiParser$stack.peek().<Object> value();
                
        RESULT = new XiType(ixleft, "int");
    
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("FnType",36, CUP$XiParser$stack.peek(), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 20: // FnType ::= BOOL 
            {
                Node RESULT = null;
                Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                Object b = CUP$XiParser$stack.peek().<Object> value();
                
        RESULT = new XiType(bxleft, "bool");
    
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("FnType",36, CUP$XiParser$stack.peek(), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 21: // FnType ::= FnType LBRACK RBRACK 
            {
                Node RESULT = null;
                Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xleft;
                Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xright;
                Node type = CUP$XiParser$stack.elementAt(CUP$XiParser$top-2).<Node> value();
                
        RESULT = new XiType(typexleft, type);
    
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("FnType",36, CUP$XiParser$stack.elementAt(CUP$XiParser$top-2), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 22: // BlockOptBraces ::= LBRACE BlockStmts RBRACE 
            {
                Node RESULT = null;
                Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xleft;
                Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xright;
                Object l = CUP$XiParser$stack.elementAt(CUP$XiParser$top-2).<Object> value();
                Location bsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xleft;
                Location bsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xright;
                Node bs = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).<Node> value();
                
        bs.location = lxleft;
        RESULT = bs;
    
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("BlockOptBraces",25, CUP$XiParser$stack.elementAt(CUP$XiParser$top-2), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 23: // BlockOptBraces ::= SingleStmtNoReturn 
            {
                Node RESULT = null;
                Location ssnrxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location ssnrxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                Node ssnr = CUP$XiParser$stack.peek().<Node> value();
                
        // ArrayList<Node> block = new ArrayList<>();
        // block.add(ssnr);
        // RESULT = new Block(ssnrxleft, block);
        RESULT = ssnr;
    
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("BlockOptBraces",25, CUP$XiParser$stack.peek(), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 24: // BlockStmts ::= StmtListNoReturn RETURN ExprList OptSemicolon 
            {
                Node RESULT = null;
                Location slnrxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-3)).xleft;
                Location slnrxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-3)).xright;
                List<Node> slnr = CUP$XiParser$stack.elementAt(CUP$XiParser$top-3).<List<Node>> value();
                Location rxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xleft;
                Location rxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xright;
                Object r = CUP$XiParser$stack.elementAt(CUP$XiParser$top-2).<Object> value();
                Location elxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xleft;
                Location elxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xright;
                List<Node> el = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).<List<Node>> value();
                
        if (el.size() == 0) {
        	slnr.add(new Return(rxleft));
        } else {
            slnr.add(new Return(rxleft, el));
        }
        RESULT = new Block(slnr);
    
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("BlockStmts",26, CUP$XiParser$stack.elementAt(CUP$XiParser$top-3), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 25: // BlockStmts ::= StmtListNoReturn 
            {
                Node RESULT = null;
                Location slnrxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location slnrxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                List<Node> slnr = CUP$XiParser$stack.peek().<List<Node>> value();
                
        RESULT = new Block(slnr);
    
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("BlockStmts",26, CUP$XiParser$stack.peek(), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 26: // ExprList ::= 
            {
                List<Node> RESULT = null;
                
        RESULT = new ArrayList<Node>();
    
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("ExprList",1, CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 27: // ExprList ::= Expr FExprList 
            {
                List<Node> RESULT = null;
                Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xleft;
                Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xright;
                Node e = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).<Node> value();
                Location felxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location felxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                List<Node> fel = CUP$XiParser$stack.peek().<List<Node>> value();
                
        fel.add(0, evalExpr(e));
        RESULT = fel;
    
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("ExprList",1, CUP$XiParser$stack.elementAt(CUP$XiParser$top-1), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 28: // FExprList ::= 
            {
                List<Node> RESULT = null;
                
        RESULT = new ArrayList<Node>();
    
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("FExprList",2, CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 29: // FExprList ::= COMMA Expr FExprList 
            {
                List<Node> RESULT = null;
                Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xleft;
                Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xright;
                Node e = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).<Node> value();
                Location felxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location felxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                List<Node> fel = CUP$XiParser$stack.peek().<List<Node>> value();
                
        fel.add(0, evalExpr(e));
        RESULT = fel;
    
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("FExprList",2, CUP$XiParser$stack.elementAt(CUP$XiParser$top-2), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 30: // SingleStmtNoReturn ::= Assign OptSemicolon 
            {
                Node RESULT = null;
                Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xleft;
                Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xright;
                Node a = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).<Node> value();
                
        RESULT = a;
    
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("SingleStmtNoReturn",27, CUP$XiParser$stack.elementAt(CUP$XiParser$top-1), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 31: // SingleStmtNoReturn ::= IfStmt 
            {
                Node RESULT = null;
                Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                Node i = CUP$XiParser$stack.peek().<Node> value();
                
        RESULT = i;
    
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("SingleStmtNoReturn",27, CUP$XiParser$stack.peek(), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 32: // SingleStmtNoReturn ::= WhileStmt 
            {
                Node RESULT = null;
                Location wxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location wxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                Node w = CUP$XiParser$stack.peek().<Node> value();
                
        RESULT = w;
    
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("SingleStmtNoReturn",27, CUP$XiParser$stack.peek(), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 33: // SingleStmtNoReturn ::= FnCall OptSemicolon 
            {
                Node RESULT = null;
                Location pxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xleft;
                Location pxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xright;
                Node p = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).<Node> value();
                
        RESULT = p;
    
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("SingleStmtNoReturn",27, CUP$XiParser$stack.elementAt(CUP$XiParser$top-1), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 34: // SingleStmtNoReturn ::= VarDeclr OptSemicolon 
            {
                Node RESULT = null;
                Location vxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xleft;
                Location vxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xright;
                Node v = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).<Node> value();
                
        RESULT = v;
    
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("SingleStmtNoReturn",27, CUP$XiParser$stack.elementAt(CUP$XiParser$top-1), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 35: // StmtListNoReturn ::= 
            {
                List<Node> RESULT = null;
                
        RESULT = new ArrayList<Node>();
    
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("StmtListNoReturn",29, CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 36: // StmtListNoReturn ::= StmtNoReturn StmtListNoReturn 
            {
                List<Node> RESULT = null;
                Location snrxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xleft;
                Location snrxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xright;
                Node snr = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).<Node> value();
                Location slnrxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location slnrxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                List<Node> slnr = CUP$XiParser$stack.peek().<List<Node>> value();
                
        slnr.add(0, snr);
        RESULT = slnr;
    
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("StmtListNoReturn",29, CUP$XiParser$stack.elementAt(CUP$XiParser$top-1), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 37: // StmtNoReturn ::= LBRACE BlockStmts RBRACE OptSemicolon 
            {
                Node RESULT = null;
                Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-3)).xleft;
                Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-3)).xright;
                Object l = CUP$XiParser$stack.elementAt(CUP$XiParser$top-3).<Object> value();
                Location blockxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xleft;
                Location blockxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xright;
                Node block = CUP$XiParser$stack.elementAt(CUP$XiParser$top-2).<Node> value();
                
        //TODO because only 1 lookahead--is it possible to refactor?
        block.location = lxleft;

        RESULT = block;
    
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("StmtNoReturn",28, CUP$XiParser$stack.elementAt(CUP$XiParser$top-3), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 38: // StmtNoReturn ::= SingleStmtNoReturn 
            {
                Node RESULT = null;
                Location ssnrxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location ssnrxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                Node ssnr = CUP$XiParser$stack.peek().<Node> value();
                
        RESULT = ssnr;
    
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("StmtNoReturn",28, CUP$XiParser$stack.peek(), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 39: // FnCall ::= IDENTIFIER LPAREN Args RPAREN 
            {
                Node RESULT = null;
                Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-3)).xleft;
                Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-3)).xright;
                String id = CUP$XiParser$stack.elementAt(CUP$XiParser$top-3).<String> value();
                Location argsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xleft;
                Location argsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xright;
                List<Node> args = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).<List<Node>> value();
                
            RESULT = new Call(idxleft, id, args);
        
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("FnCall",3, CUP$XiParser$stack.elementAt(CUP$XiParser$top-3), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 40: // Args ::= 
            {
                List<Node> RESULT = null;
                
            RESULT = new ArrayList<Node>();
        
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("Args",4, CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 41: // Args ::= Expr FArgs 
            {
                List<Node> RESULT = null;
                Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xleft;
                Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xright;
                Node e = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).<Node> value();
                Location fargsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location fargsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                List<Node> fargs = CUP$XiParser$stack.peek().<List<Node>> value();
                  
            fargs.add(0, evalExpr(e));
            RESULT = fargs;
        
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("Args",4, CUP$XiParser$stack.elementAt(CUP$XiParser$top-1), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 42: // FArgs ::= 
            {
                List<Node> RESULT = null;
                
        RESULT = new ArrayList<Node>();
    
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("FArgs",5, CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 43: // FArgs ::= COMMA Expr FArgs 
            {
                List<Node> RESULT = null;
                Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xleft;
                Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xright;
                Node e = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).<Node> value();
                Location fargsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location fargsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                List<Node> fargs = CUP$XiParser$stack.peek().<List<Node>> value();
                
            fargs.add(0, evalExpr(e));
            RESULT = fargs;
        
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("FArgs",5, CUP$XiParser$stack.elementAt(CUP$XiParser$top-2), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 44: // ArrayCall ::= FnCall LBRACK Expr RBRACK IndexList 
            {
                Node RESULT = null;
                Location fcxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-4)).xleft;
                Location fcxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-4)).xright;
                Node fc = CUP$XiParser$stack.elementAt(CUP$XiParser$top-4).<Node> value();
                Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xleft;
                Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xright;
                Node e = CUP$XiParser$stack.elementAt(CUP$XiParser$top-2).<Node> value();
                Location ilxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location ilxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                List<Node> il = CUP$XiParser$stack.peek().<List<Node>> value();
                
            il.add(0, evalExpr(e));
            Index index = new Index(fcxleft, fc, il.get(0));
            for(int i =1; i<il.size(); i++) {
                Node n = il.get(i);
                index = new Index(n.location, index, n);
            }
            RESULT = index;
        
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("ArrayCall",6, CUP$XiParser$stack.elementAt(CUP$XiParser$top-4), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 45: // ArrayCall ::= IDENTIFIER LBRACK Expr RBRACK IndexList 
            {
                Node RESULT = null;
                Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-4)).xleft;
                Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-4)).xright;
                String id = CUP$XiParser$stack.elementAt(CUP$XiParser$top-4).<String> value();
                Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xleft;
                Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xright;
                Node e = CUP$XiParser$stack.elementAt(CUP$XiParser$top-2).<Node> value();
                Location ilxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location ilxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                List<Node> il = CUP$XiParser$stack.peek().<List<Node>> value();
                
            il.add(0, evalExpr(e));
            Index index = new Index(idxleft, new Var(idxleft, id), il.get(0));
            for(int i =1; i<il.size(); i++) {
                Node n = il.get(i);
                index = new Index(n.location, index, n);
            }
            RESULT = index;
        
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("ArrayCall",6, CUP$XiParser$stack.elementAt(CUP$XiParser$top-4), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 46: // IndexList ::= 
            {
                List<Node> RESULT = null;
                
            RESULT = new ArrayList<Node>();
        
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("IndexList",7, CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 47: // IndexList ::= LBRACK Expr RBRACK IndexList 
            {
                List<Node> RESULT = null;
                Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xleft;
                Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xright;
                Node e = CUP$XiParser$stack.elementAt(CUP$XiParser$top-2).<Node> value();
                Location ilxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location ilxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                List<Node> il = CUP$XiParser$stack.peek().<List<Node>> value();
                
            il.add(0, evalExpr(e));
            RESULT = il;
        
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("IndexList",7, CUP$XiParser$stack.elementAt(CUP$XiParser$top-3), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 48: // ArrayElems ::= 
            {
                List<Node> RESULT = null;
                
        RESULT = new ArrayList<Node>();
    
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("ArrayElems",8, CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 49: // ArrayElems ::= Expr FArrayElems 
            {
                List<Node> RESULT = null;
                Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xleft;
                Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xright;
                Node e = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).<Node> value();
                Location faexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location faexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                List<Node> fae = CUP$XiParser$stack.peek().<List<Node>> value();
                
        fae.add(0, evalExpr(e));
        RESULT = fae;
    
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("ArrayElems",8, CUP$XiParser$stack.elementAt(CUP$XiParser$top-1), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 50: // FArrayElems ::= 
            {
                List<Node> RESULT = null;
                
        RESULT = new ArrayList<Node>();
    
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("FArrayElems",9, CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 51: // FArrayElems ::= COMMA 
            {
                List<Node> RESULT = null;
                
        RESULT = new ArrayList<Node>();
    
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("FArrayElems",9, CUP$XiParser$stack.peek(), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 52: // FArrayElems ::= COMMA Expr FArrayElems 
            {
                List<Node> RESULT = null;
                Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xleft;
                Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xright;
                Node e = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).<Node> value();
                Location faexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location faexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                List<Node> fae = CUP$XiParser$stack.peek().<List<Node>> value();
                
        fae.add(0, evalExpr(e));
        RESULT = fae;
    
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("FArrayElems",9, CUP$XiParser$stack.elementAt(CUP$XiParser$top-2), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 53: // VarDeclr ::= IDENTIFIER COLON VarType 
            {
                Node RESULT = null;
                Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xleft;
                Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xright;
                String id = CUP$XiParser$stack.elementAt(CUP$XiParser$top-2).<String> value();
                Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                Node type = CUP$XiParser$stack.peek().<Node> value();
                
        RESULT = new Declare(idxleft, id, type);
    
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("VarDeclr",10, CUP$XiParser$stack.elementAt(CUP$XiParser$top-2), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 54: // VarType ::= KeyType VarTypeIndexList 
            {
                Node RESULT = null;
                Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xleft;
                Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xright;
                Node type = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).<Node> value();
                Location vtilxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location vtilxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                List<Node> vtil = CUP$XiParser$stack.peek().<List<Node>> value();
                
        for(int i=vtil.size()-1; i>=0; i--) {
            if(vtil.get(i) == null){
                type = new XiType(typexleft,type);
            }
            else {
                type = new XiType(typexleft, type, vtil.get(i));
            }
        }
        RESULT = type;
    
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("VarType",11, CUP$XiParser$stack.elementAt(CUP$XiParser$top-1), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 55: // VarTypeIndexList ::= 
            {
                List<Node> RESULT = null;
                
        RESULT = new ArrayList<Node>();
    
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("VarTypeIndexList",13, CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 56: // VarTypeIndexList ::= LBRACK Expr RBRACK VarTypeIndexList 
            {
                List<Node> RESULT = null;
                Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xleft;
                Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xright;
                Node e = CUP$XiParser$stack.elementAt(CUP$XiParser$top-2).<Node> value();
                Location vtilxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location vtilxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                List<Node> vtil = CUP$XiParser$stack.peek().<List<Node>> value();
                
        vtil.add(0,evalExpr(e));
        RESULT = vtil;
    
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("VarTypeIndexList",13, CUP$XiParser$stack.elementAt(CUP$XiParser$top-3), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 57: // VarTypeIndexList ::= LBRACK RBRACK VarTypeIndexListNoExpr 
            {
                List<Node> RESULT = null;
                Location vtilnexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location vtilnexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                List<Node> vtilne = CUP$XiParser$stack.peek().<List<Node>> value();
                
        vtilne.add(0,null);
        RESULT = vtilne;
    
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("VarTypeIndexList",13, CUP$XiParser$stack.elementAt(CUP$XiParser$top-2), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 58: // VarTypeIndexListNoExpr ::= 
            {
                List<Node> RESULT = null;
                
        RESULT = new ArrayList<Node>();
    
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("VarTypeIndexListNoExpr",14, CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 59: // VarTypeIndexListNoExpr ::= LBRACK RBRACK VarTypeIndexListNoExpr 
            {
                List<Node> RESULT = null;
                Location vtilnexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location vtilnexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                List<Node> vtilne = CUP$XiParser$stack.peek().<List<Node>> value();
                
        vtilne.add(0,null);
        RESULT = vtilne;
    
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("VarTypeIndexListNoExpr",14, CUP$XiParser$stack.elementAt(CUP$XiParser$top-2), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 60: // KeyType ::= INT 
            {
                Node RESULT = null;
                Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                Object i = CUP$XiParser$stack.peek().<Object> value();
                
        RESULT = new XiType(ixleft, "int");
    
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("KeyType",12, CUP$XiParser$stack.peek(), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 61: // KeyType ::= BOOL 
            {
                Node RESULT = null;
                Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                Object b = CUP$XiParser$stack.peek().<Object> value();
                
        RESULT = new XiType(bxleft, "bool");
    
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("KeyType",12, CUP$XiParser$stack.peek(), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 62: // Assign ::= IDList EQ Expr 
            {
                Node RESULT = null;
                Location ilxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xleft;
                Location ilxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xright;
                List<Node> il = CUP$XiParser$stack.elementAt(CUP$XiParser$top-2).<List<Node>> value();
                Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                Node e = CUP$XiParser$stack.peek().<Node> value();
                
        RESULT = new Assign(ilxleft, il, evalExpr(e));
    
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("Assign",15, CUP$XiParser$stack.elementAt(CUP$XiParser$top-2), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 63: // Assign ::= SingleAssignName EQ Expr 
            {
                Node RESULT = null;
                Location sanxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xleft;
                Location sanxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xright;
                Node san = CUP$XiParser$stack.elementAt(CUP$XiParser$top-2).<Node> value();
                Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                Node e = CUP$XiParser$stack.peek().<Node> value();
                
        RESULT = new Assign(sanxleft, san, evalExpr(e));
    
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("Assign",15, CUP$XiParser$stack.elementAt(CUP$XiParser$top-2), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 64: // IDList ::= MultiAssignName COMMA MultiAssignName FIDList 
            {
                List<Node> RESULT = null;
                Location anxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-3)).xleft;
                Location anxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-3)).xright;
                Node an = CUP$XiParser$stack.elementAt(CUP$XiParser$top-3).<Node> value();
                Location bnxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xleft;
                Location bnxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xright;
                Node bn = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).<Node> value();
                Location flxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location flxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                List<Node> fl = CUP$XiParser$stack.peek().<List<Node>> value();
                
        fl.add(0, bn);
        fl.add(0, an);
        RESULT = fl;
    
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("IDList",20, CUP$XiParser$stack.elementAt(CUP$XiParser$top-3), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 65: // FIDList ::= 
            {
                List<Node> RESULT = null;
                
        RESULT = new ArrayList<Node>();
    
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("FIDList",21, CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 66: // FIDList ::= COMMA MultiAssignName FIDList 
            {
                List<Node> RESULT = null;
                Location anxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xleft;
                Location anxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xright;
                Node an = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).<Node> value();
                Location flxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location flxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                List<Node> fl = CUP$XiParser$stack.peek().<List<Node>> value();
                
        fl.add(0, an);
        RESULT = fl;
    
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("FIDList",21, CUP$XiParser$stack.elementAt(CUP$XiParser$top-2), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 67: // MultiAssignName ::= UNDERSCORE 
            {
                Node RESULT = null;
                Location uxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location uxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                Object u = CUP$XiParser$stack.peek().<Object> value();
                
        RESULT = new Declare(uxleft);
    
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("MultiAssignName",17, CUP$XiParser$stack.peek(), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 68: // MultiAssignName ::= AssignVarDeclr 
            {
                Node RESULT = null;
                Location vxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location vxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                Node v = CUP$XiParser$stack.peek().<Node> value();
                
        RESULT = v;
    
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("MultiAssignName",17, CUP$XiParser$stack.peek(), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 69: // SingleAssignName ::= UNDERSCORE 
            {
                Node RESULT = null;
                Location uxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location uxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                Object u = CUP$XiParser$stack.peek().<Object> value();
                
        RESULT = new Declare(uxleft);
    
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("SingleAssignName",16, CUP$XiParser$stack.peek(), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 70: // SingleAssignName ::= IDENTIFIER 
            {
                Node RESULT = null;
                Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                String id = CUP$XiParser$stack.peek().<String> value();
                
        RESULT = new Var(idxleft, id);
    
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("SingleAssignName",16, CUP$XiParser$stack.peek(), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 71: // SingleAssignName ::= ArrayCall 
            {
                Node RESULT = null;
                Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                Node a = CUP$XiParser$stack.peek().<Node> value();
                
        RESULT = a;
    
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("SingleAssignName",16, CUP$XiParser$stack.peek(), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 72: // SingleAssignName ::= AssignVarDeclr 
            {
                Node RESULT = null;
                Location vxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location vxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                Node v = CUP$XiParser$stack.peek().<Node> value();
                
        RESULT = v;
    
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("SingleAssignName",16, CUP$XiParser$stack.peek(), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 73: // AssignVarDeclr ::= IDENTIFIER COLON AssignVarType 
            {
                Node RESULT = null;
                Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xleft;
                Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xright;
                String id = CUP$XiParser$stack.elementAt(CUP$XiParser$top-2).<String> value();
                Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                Node type = CUP$XiParser$stack.peek().<Node> value();
                
        RESULT = new Declare(idxleft, id, type);
    
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("AssignVarDeclr",18, CUP$XiParser$stack.elementAt(CUP$XiParser$top-2), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 74: // AssignVarType ::= KeyType VarTypeIndexListNoExpr 
            {
                Node RESULT = null;
                Location typexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xleft;
                Location typexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xright;
                Node type = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).<Node> value();
                Location vtilnexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location vtilnexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                List<Node> vtilne = CUP$XiParser$stack.peek().<List<Node>> value();
                
        for(int i=vtilne.size()-1; i>=0; i--) {
            if(vtilne.get(i) == null){
                type = new XiType(typexleft, type);
            }
            else {
                type = new XiType(typexleft, type, vtilne.get(i));
            }
        }
        RESULT = type;
    
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("AssignVarType",19, CUP$XiParser$stack.elementAt(CUP$XiParser$top-1), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 75: // WhileStmt ::= WHILE Expr BlockOptBraces 
            {
                Node RESULT = null;
                Location wxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xleft;
                Location wxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xright;
                Object w = CUP$XiParser$stack.elementAt(CUP$XiParser$top-2).<Object> value();
                Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xleft;
                Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xright;
                Node e = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).<Node> value();
                Location blockxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location blockxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                Node block = CUP$XiParser$stack.peek().<Node> value();
                
        RESULT = new While(wxleft, evalExpr(e), block);
    
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("WhileStmt",22, CUP$XiParser$stack.elementAt(CUP$XiParser$top-2), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 76: // IfStmt ::= IF Expr BlockOptBraces ElseStmt 
            {
                Node RESULT = null;
                Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-3)).xleft;
                Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-3)).xright;
                Object i = CUP$XiParser$stack.elementAt(CUP$XiParser$top-3).<Object> value();
                Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xleft;
                Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xright;
                Node e = CUP$XiParser$stack.elementAt(CUP$XiParser$top-2).<Node> value();
                Location blockxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xleft;
                Location blockxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xright;
                Node block = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).<Node> value();
                Location elxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location elxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                Node el = CUP$XiParser$stack.peek().<Node> value();
                
        If node = (el == null) ? new If(ixleft, evalExpr(e), block) : new If(ixleft, evalExpr(e), block, el);
        RESULT = node;
    
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("IfStmt",23, CUP$XiParser$stack.elementAt(CUP$XiParser$top-3), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 77: // ElseStmt ::= 
            {
                Node RESULT = null;
                 
        RESULT = null;
    
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("ElseStmt",24, CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 78: // ElseStmt ::= ELSE BlockOptBraces 
            {
                Node RESULT = null;
                Location elxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xleft;
                Location elxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xright;
                Object el = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).<Object> value();
                Location blockxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location blockxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                Node block = CUP$XiParser$stack.peek().<Node> value();
                
        RESULT = block;
    
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("ElseStmt",24, CUP$XiParser$stack.elementAt(CUP$XiParser$top-1), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 79: // Expr ::= LPAREN Expr RPAREN 
            {
                Node RESULT = null;
                Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xleft;
                Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xright;
                Node e = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).<Node> value();
                
            RESULT = evalExpr(e);
        
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("Expr",0, CUP$XiParser$stack.elementAt(CUP$XiParser$top-2), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 80: // Expr ::= LNEG Expr 
            {
                Node RESULT = null;
                Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xleft;
                Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xright;
                Object l = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).<Object> value();
                Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                Node e = CUP$XiParser$stack.peek().<Node> value();
                
            RESULT = new Unary(lxleft, Unary.Kind.LNEGATE, evalExpr(e));
        
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("Expr",0, CUP$XiParser$stack.elementAt(CUP$XiParser$top-1), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 81: // Expr ::= MINUS Expr 
            {
                Node RESULT = null;
                Location mxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xleft;
                Location mxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xright;
                Object m = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).<Object> value();
                Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                Node e = CUP$XiParser$stack.peek().<Node> value();
                
            RESULT = evalNegExpr(mxleft, e);
        
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("Expr",0, CUP$XiParser$stack.elementAt(CUP$XiParser$top-1), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 82: // Expr ::= Expr MULT Expr 
            {
                Node RESULT = null;
                Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xleft;
                Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xright;
                Node e1 = CUP$XiParser$stack.elementAt(CUP$XiParser$top-2).<Node> value();
                Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xleft;
                Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xright;
                Object b = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).<Object> value();
                Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                Node e2 = CUP$XiParser$stack.peek().<Node> value();
                
            RESULT = new Binary(bxleft, Binary.Kind.TIMES, evalExpr(e1), evalExpr(e2));
        
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("Expr",0, CUP$XiParser$stack.elementAt(CUP$XiParser$top-2), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 83: // Expr ::= Expr HMULT Expr 
            {
                Node RESULT = null;
                Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xleft;
                Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xright;
                Node e1 = CUP$XiParser$stack.elementAt(CUP$XiParser$top-2).<Node> value();
                Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xleft;
                Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xright;
                Object b = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).<Object> value();
                Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                Node e2 = CUP$XiParser$stack.peek().<Node> value();
                
            RESULT = new Binary(bxleft, Binary.Kind.HIGH_TIMES, evalExpr(e1), evalExpr(e2));
        
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("Expr",0, CUP$XiParser$stack.elementAt(CUP$XiParser$top-2), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 84: // Expr ::= Expr DIV Expr 
            {
                Node RESULT = null;
                Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xleft;
                Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xright;
                Node e1 = CUP$XiParser$stack.elementAt(CUP$XiParser$top-2).<Node> value();
                Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xleft;
                Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xright;
                Object b = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).<Object> value();
                Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                Node e2 = CUP$XiParser$stack.peek().<Node> value();
                
            RESULT = new Binary(bxleft, Binary.Kind.DIVISION, evalExpr(e1), evalExpr(e2));
        
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("Expr",0, CUP$XiParser$stack.elementAt(CUP$XiParser$top-2), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 85: // Expr ::= Expr MOD Expr 
            {
                Node RESULT = null;
                Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xleft;
                Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xright;
                Node e1 = CUP$XiParser$stack.elementAt(CUP$XiParser$top-2).<Node> value();
                Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xleft;
                Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xright;
                Object b = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).<Object> value();
                Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                Node e2 = CUP$XiParser$stack.peek().<Node> value();
                
            RESULT = new Binary(bxleft, Binary.Kind.MODULO, evalExpr(e1), evalExpr(e2));
        
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("Expr",0, CUP$XiParser$stack.elementAt(CUP$XiParser$top-2), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 86: // Expr ::= Expr ADD Expr 
            {
                Node RESULT = null;
                Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xleft;
                Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xright;
                Node e1 = CUP$XiParser$stack.elementAt(CUP$XiParser$top-2).<Node> value();
                Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xleft;
                Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xright;
                Object b = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).<Object> value();
                Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                Node e2 = CUP$XiParser$stack.peek().<Node> value();
                
            RESULT = new Binary(bxleft, Binary.Kind.PLUS, evalExpr(e1), evalExpr(e2));
        
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("Expr",0, CUP$XiParser$stack.elementAt(CUP$XiParser$top-2), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 87: // Expr ::= Expr MINUS Expr 
            {
                Node RESULT = null;
                Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xleft;
                Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xright;
                Node e1 = CUP$XiParser$stack.elementAt(CUP$XiParser$top-2).<Node> value();
                Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xleft;
                Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xright;
                Object b = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).<Object> value();
                Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                Node e2 = CUP$XiParser$stack.peek().<Node> value();
                
            RESULT = new Binary(bxleft, Binary.Kind.MINUS, evalExpr(e1), evalExpr(e2));
        
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("Expr",0, CUP$XiParser$stack.elementAt(CUP$XiParser$top-2), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 88: // Expr ::= Expr LTE Expr 
            {
                Node RESULT = null;
                Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xleft;
                Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xright;
                Node e1 = CUP$XiParser$stack.elementAt(CUP$XiParser$top-2).<Node> value();
                Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xleft;
                Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xright;
                Object b = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).<Object> value();
                Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                Node e2 = CUP$XiParser$stack.peek().<Node> value();
                
            RESULT = new Binary(bxleft, Binary.Kind.LE, evalExpr(e1), evalExpr(e2));
        
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("Expr",0, CUP$XiParser$stack.elementAt(CUP$XiParser$top-2), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 89: // Expr ::= Expr LT Expr 
            {
                Node RESULT = null;
                Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xleft;
                Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xright;
                Node e1 = CUP$XiParser$stack.elementAt(CUP$XiParser$top-2).<Node> value();
                Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xleft;
                Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xright;
                Object b = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).<Object> value();
                Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                Node e2 = CUP$XiParser$stack.peek().<Node> value();
                
            RESULT = new Binary(bxleft, Binary.Kind.LT, evalExpr(e1), evalExpr(e2));
        
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("Expr",0, CUP$XiParser$stack.elementAt(CUP$XiParser$top-2), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 90: // Expr ::= Expr GTE Expr 
            {
                Node RESULT = null;
                Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xleft;
                Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xright;
                Node e1 = CUP$XiParser$stack.elementAt(CUP$XiParser$top-2).<Node> value();
                Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xleft;
                Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xright;
                Object b = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).<Object> value();
                Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                Node e2 = CUP$XiParser$stack.peek().<Node> value();
                
            RESULT = new Binary(bxleft, Binary.Kind.GE, evalExpr(e1), evalExpr(e2));
        
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("Expr",0, CUP$XiParser$stack.elementAt(CUP$XiParser$top-2), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 91: // Expr ::= Expr GT Expr 
            {
                Node RESULT = null;
                Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xleft;
                Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xright;
                Node e1 = CUP$XiParser$stack.elementAt(CUP$XiParser$top-2).<Node> value();
                Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xleft;
                Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xright;
                Object b = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).<Object> value();
                Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                Node e2 = CUP$XiParser$stack.peek().<Node> value();
                
            RESULT = new Binary(bxleft, Binary.Kind.GT, evalExpr(e1), evalExpr(e2));
        
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("Expr",0, CUP$XiParser$stack.elementAt(CUP$XiParser$top-2), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 92: // Expr ::= Expr EQEQ Expr 
            {
                Node RESULT = null;
                Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xleft;
                Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xright;
                Node e1 = CUP$XiParser$stack.elementAt(CUP$XiParser$top-2).<Node> value();
                Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xleft;
                Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xright;
                Object b = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).<Object> value();
                Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                Node e2 = CUP$XiParser$stack.peek().<Node> value();
                
            RESULT = new Binary(bxleft, Binary.Kind.EQ, evalExpr(e1), evalExpr(e2));
        
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("Expr",0, CUP$XiParser$stack.elementAt(CUP$XiParser$top-2), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 93: // Expr ::= Expr NEQ Expr 
            {
                Node RESULT = null;
                Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xleft;
                Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xright;
                Node e1 = CUP$XiParser$stack.elementAt(CUP$XiParser$top-2).<Node> value();
                Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xleft;
                Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xright;
                Object b = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).<Object> value();
                Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                Node e2 = CUP$XiParser$stack.peek().<Node> value();
                
            RESULT = new Binary(bxleft, Binary.Kind.NE, evalExpr(e1), evalExpr(e2));
        
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("Expr",0, CUP$XiParser$stack.elementAt(CUP$XiParser$top-2), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 94: // Expr ::= Expr LAND Expr 
            {
                Node RESULT = null;
                Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xleft;
                Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xright;
                Node e1 = CUP$XiParser$stack.elementAt(CUP$XiParser$top-2).<Node> value();
                Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xleft;
                Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xright;
                Object b = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).<Object> value();
                Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                Node e2 = CUP$XiParser$stack.peek().<Node> value();
                
            RESULT = new Binary(bxleft, Binary.Kind.AND, evalExpr(e1), evalExpr(e2));
        
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("Expr",0, CUP$XiParser$stack.elementAt(CUP$XiParser$top-2), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 95: // Expr ::= Expr LOR Expr 
            {
                Node RESULT = null;
                Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xleft;
                Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-2)).xright;
                Node e1 = CUP$XiParser$stack.elementAt(CUP$XiParser$top-2).<Node> value();
                Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xleft;
                Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xright;
                Object b = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).<Object> value();
                Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                Node e2 = CUP$XiParser$stack.peek().<Node> value();
                
            RESULT = new Binary(bxleft, Binary.Kind.OR, evalExpr(e1), evalExpr(e2));
        
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("Expr",0, CUP$XiParser$stack.elementAt(CUP$XiParser$top-2), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 96: // Expr ::= FnCall 
            {
                Node RESULT = null;
                Location fcxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location fcxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                Node fc = CUP$XiParser$stack.peek().<Node> value();
                
            RESULT = fc;
        
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("Expr",0, CUP$XiParser$stack.peek(), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 97: // Expr ::= LENGTH LPAREN Expr RPAREN 
            {
                Node RESULT = null;
                Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-3)).xleft;
                Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-3)).xright;
                Object l = CUP$XiParser$stack.elementAt(CUP$XiParser$top-3).<Object> value();
                Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xleft;
                Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xright;
                Node e = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).<Node> value();
                
            RESULT = new Call(lxleft, "length", evalExpr(e));
        
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("Expr",0, CUP$XiParser$stack.elementAt(CUP$XiParser$top-3), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 98: // Expr ::= Expr LBRACK Expr RBRACK 
            {
                Node RESULT = null;
                Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-3)).xleft;
                Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-3)).xright;
                Node e1 = CUP$XiParser$stack.elementAt(CUP$XiParser$top-3).<Node> value();
                Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xleft;
                Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xright;
                Node e2 = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).<Node> value();
                
            Index index = new Index(e1xleft, evalExpr(e1), evalExpr(e2));
            RESULT = index;
        
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("Expr",0, CUP$XiParser$stack.elementAt(CUP$XiParser$top-3), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 99: // Expr ::= LBRACE ArrayElems RBRACE 
            {
                Node RESULT = null;
                Location aexleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xleft;
                Location aexright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.elementAt(CUP$XiParser$top-1)).xright;
                List<Node> ae = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).<List<Node>> value();
                
            RESULT = new XiArray(aexleft, ae);
        
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("Expr",0, CUP$XiParser$stack.elementAt(CUP$XiParser$top-2), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 100: // Expr ::= TRUE 
            {
                Node RESULT = null;
                Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                Boolean t = CUP$XiParser$stack.peek().<Boolean> value();
                
            RESULT = new XiBool(txleft, t); 
        
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("Expr",0, CUP$XiParser$stack.peek(), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 101: // Expr ::= FALSE 
            {
                Node RESULT = null;
                Location fxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location fxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                Boolean f = CUP$XiParser$stack.peek().<Boolean> value();
                
            RESULT = new XiBool(fxleft, f);
        
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("Expr",0, CUP$XiParser$stack.peek(), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 102: // Expr ::= INTEGER 
            {
                Node RESULT = null;
                Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                String i = CUP$XiParser$stack.peek().<String> value();
                
            RESULT = new TempInt(ixleft, i);
        
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("Expr",0, CUP$XiParser$stack.peek(), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 103: // Expr ::= CHAR 
            {
                Node RESULT = null;
                Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                CharWrapper c = CUP$XiParser$stack.peek().<CharWrapper> value();
                
            RESULT = new XiChar(cxleft, c.name, c.value);
        
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("Expr",0, CUP$XiParser$stack.peek(), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 104: // Expr ::= STRING 
            {
                Node RESULT = null;
                Location sxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location sxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                StringWrapper s = CUP$XiParser$stack.peek().<StringWrapper> value();
                
            RESULT = new XiString(sxleft, s.name, s.value);
        
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("Expr",0, CUP$XiParser$stack.peek(), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 105: // Expr ::= IDENTIFIER 
            {
                Node RESULT = null;
                Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xleft;
                Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$XiParser$stack.peek()).xright;
                String id = CUP$XiParser$stack.peek().<String> value();
                
            RESULT = new Var(idxleft, id);
        
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("Expr",0, CUP$XiParser$stack.peek(), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /* . . . . . .*/
        default:
            throw new Exception(
                  "Invalid action number " + CUP$XiParser$act_num + " found in internal parse table");

        }
    } /* end of method */

    /** Method splitting the generated action code into several parts. */
    public final java_cup.runtime.Symbol CUP$XiParser$do_action(
            int                        CUP$XiParser$act_num,
            java_cup.runtime.lr_parser CUP$XiParser$parser,
            java.util.Stack<java_cup.runtime.Symbol> CUP$XiParser$stack,
            int                        CUP$XiParser$top)
            throws java.lang.Exception {
            return CUP$XiParser$do_action_part00000000(
                           CUP$XiParser$act_num,
                           CUP$XiParser$parser,
                           CUP$XiParser$stack,
                           CUP$XiParser$top);
    }
}

}
