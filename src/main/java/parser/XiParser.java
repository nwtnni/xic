
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150326
//----------------------------------------------------

import java_cup.runtime.*;

/** CUP v0.11b 20150326 generated parser.
  */
public class XiParser
 extends java_cup.runtime.lr_parser {

  @Override
  public final Class<?> getSymbolContainer() {
    return Symbol.class;
  }

  /** Default constructor. */
  @Deprecated
  public XiParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public XiParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner and a SymbolFactory. */
  public XiParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\011\000\002\002\005\000\002\002\004\000\002\002" +
    "\004\000\002\003\005\000\002\003\005\000\002\003\005" +
    "\000\002\003\004\000\002\003\005\000\002\003\003" });

  /** Access to production table. */
  @Override
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\023\000\010\006\010\011\006\013\004\001\002\000" +
    "\014\004\ufff9\005\ufff9\006\ufff9\007\ufff9\012\ufff9\001\002" +
    "\000\012\002\024\006\010\011\006\013\004\001\002\000" +
    "\010\006\010\011\006\013\004\001\002\000\012\004\020" +
    "\005\014\006\013\007\012\001\002\000\010\006\010\011" +
    "\006\013\004\001\002\000\014\004\ufffb\005\ufffb\006\ufffb" +
    "\007\ufffb\012\ufffb\001\002\000\010\006\010\011\006\013" +
    "\004\001\002\000\010\006\010\011\006\013\004\001\002" +
    "\000\010\006\010\011\006\013\004\001\002\000\014\004" +
    "\ufffe\005\ufffe\006\ufffe\007\012\012\ufffe\001\002\000\014" +
    "\004\ufffd\005\ufffd\006\ufffd\007\012\012\ufffd\001\002\000" +
    "\014\004\ufffc\005\ufffc\006\ufffc\007\ufffc\012\ufffc\001\002" +
    "\000\012\002\uffff\006\uffff\011\uffff\013\uffff\001\002\000" +
    "\012\005\014\006\013\007\012\012\022\001\002\000\014" +
    "\004\ufffa\005\ufffa\006\ufffa\007\ufffa\012\ufffa\001\002\000" +
    "\012\004\025\005\014\006\013\007\012\001\002\000\004" +
    "\002\000\001\002\000\012\002\001\006\001\011\001\013" +
    "\001\001\002" });

  /** Access to parse-action table. */
  @Override
  public short[][] action_table() {return _action_table;}

  /** {@code reduce_goto} table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\023\000\006\002\004\003\006\001\001\000\002\001" +
    "\001\000\004\003\022\001\001\000\004\003\020\001\001" +
    "\000\002\001\001\000\004\003\010\001\001\000\002\001" +
    "\001\000\004\003\016\001\001\000\004\003\015\001\001" +
    "\000\004\003\014\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to {@code reduce_goto} table. */
  @Override
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$XiParser$actions action_obj;

  /** Action encapsulation object initializer. */
  @Override
  protected void init_actions()
    {
      action_obj = new CUP$XiParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  @Override
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack<java_cup.runtime.Symbol> stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$XiParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  @Override
  public int start_state() {return 0;}
  /** Indicates start production. */
  @Override
  public int start_production() {return 1;}

  /** {@code EOF} Symbol index. */
  @Override
  public int EOF_sym() {return 0;}

  /** {@code error} Symbol index. */
  @Override
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 s.init(); 
    }

  /** Scan to get the next Symbol. */
  @Override
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return s.next_token(); 
    }


	// Connect this parser to a scanner!
	scanner s;
	Parser(scanner s){ this.s=s; }
	

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$XiParser$actions {
    private final XiParser parser;

    /** Constructor */
    CUP$XiParser$actions(XiParser parser) {
        this.parser = parser;
    }

    /** Method with the actual generated action code for actions 0 to 8. */
    public final java_cup.runtime.Symbol CUP$XiParser$do_action_part00000000(
            int                        CUP$XiParser$act_num,
            java_cup.runtime.lr_parser CUP$XiParser$parser,
            java.util.Stack<java_cup.runtime.Symbol> CUP$XiParser$stack,
            int                        CUP$XiParser$top)
            throws java.lang.Exception {
            /* Symbol object for return from actions */
            java_cup.runtime.Symbol CUP$XiParser$result;

        /* select the action based on the action number */
        switch (CUP$XiParser$act_num) {
        /*. . . . . . . . . . . . . . . . . . . .*/
        case 0: // expr_list ::= expr_list expr SEMI 
            {
                Object RESULT = null;
                int eleft = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).left;
                int eright = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).right;
                Integer e = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).<Integer> value();
                 System.out.println(e);
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("expr_list",0, CUP$XiParser$stack.elementAt(CUP$XiParser$top-2), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 1: // $START ::= expr_list EOF 
            {
                Object RESULT = null;
                int start_valleft = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).left;
                int start_valright = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).right;
                Object start_val = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).<Object> value();
                RESULT = start_val;
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("$START",0, CUP$XiParser$stack.elementAt(CUP$XiParser$top-1), CUP$XiParser$stack.peek(), RESULT);
            }
            /* ACCEPT */
            CUP$XiParser$parser.done_parsing();
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 2: // expr_list ::= expr SEMI 
            {
                Object RESULT = null;
                int eleft = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).left;
                int eright = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).right;
                Integer e = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).<Integer> value();
                 System.out.println(e);
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("expr_list",0, CUP$XiParser$stack.elementAt(CUP$XiParser$top-1), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 3: // expr ::= expr PLUS expr 
            {
                Integer RESULT = null;
                int e1left = CUP$XiParser$stack.elementAt(CUP$XiParser$top-2).left;
                int e1right = CUP$XiParser$stack.elementAt(CUP$XiParser$top-2).right;
                Integer e1 = CUP$XiParser$stack.elementAt(CUP$XiParser$top-2).<Integer> value();
                int e2left = CUP$XiParser$stack.peek().left;
                int e2right = CUP$XiParser$stack.peek().right;
                Integer e2 = CUP$XiParser$stack.peek().<Integer> value();
                 RESULT = e1+e2;       
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("expr",1, CUP$XiParser$stack.elementAt(CUP$XiParser$top-2), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 4: // expr ::= expr MINUS expr 
            {
                Integer RESULT = null;
                int e1left = CUP$XiParser$stack.elementAt(CUP$XiParser$top-2).left;
                int e1right = CUP$XiParser$stack.elementAt(CUP$XiParser$top-2).right;
                Integer e1 = CUP$XiParser$stack.elementAt(CUP$XiParser$top-2).<Integer> value();
                int e2left = CUP$XiParser$stack.peek().left;
                int e2right = CUP$XiParser$stack.peek().right;
                Integer e2 = CUP$XiParser$stack.peek().<Integer> value();
                 RESULT = e1-e2;       
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("expr",1, CUP$XiParser$stack.elementAt(CUP$XiParser$top-2), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 5: // expr ::= expr TIMES expr 
            {
                Integer RESULT = null;
                int e1left = CUP$XiParser$stack.elementAt(CUP$XiParser$top-2).left;
                int e1right = CUP$XiParser$stack.elementAt(CUP$XiParser$top-2).right;
                Integer e1 = CUP$XiParser$stack.elementAt(CUP$XiParser$top-2).<Integer> value();
                int e2left = CUP$XiParser$stack.peek().left;
                int e2right = CUP$XiParser$stack.peek().right;
                Integer e2 = CUP$XiParser$stack.peek().<Integer> value();
                 RESULT = e1*e2;       
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("expr",1, CUP$XiParser$stack.elementAt(CUP$XiParser$top-2), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 6: // expr ::= MINUS expr 
            {
                Integer RESULT = null;
                int eleft = CUP$XiParser$stack.peek().left;
                int eright = CUP$XiParser$stack.peek().right;
                Integer e = CUP$XiParser$stack.peek().<Integer> value();
                 RESULT = -e;          
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("expr",1, CUP$XiParser$stack.elementAt(CUP$XiParser$top-1), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 7: // expr ::= LPAREN expr RPAREN 
            {
                Integer RESULT = null;
                int eleft = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).left;
                int eright = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).right;
                Integer e = CUP$XiParser$stack.elementAt(CUP$XiParser$top-1).<Integer> value();
                 RESULT = e;           
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("expr",1, CUP$XiParser$stack.elementAt(CUP$XiParser$top-2), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /*. . . . . . . . . . . . . . . . . . . .*/
        case 8: // expr ::= NUMBER 
            {
                Integer RESULT = null;
                int nleft = CUP$XiParser$stack.peek().left;
                int nright = CUP$XiParser$stack.peek().right;
                Integer n = CUP$XiParser$stack.peek().<Integer> value();
                 RESULT = n;           
                CUP$XiParser$result = parser.getSymbolFactory().newSymbol("expr",1, CUP$XiParser$stack.peek(), CUP$XiParser$stack.peek(), RESULT);
            }
            return CUP$XiParser$result;

        /* . . . . . .*/
        default:
            throw new Exception(
                  "Invalid action number " + CUP$XiParser$act_num + " found in internal parse table");

        }
    } /* end of method */

    /** Method splitting the generated action code into several parts. */
    public final java_cup.runtime.Symbol CUP$XiParser$do_action(
            int                        CUP$XiParser$act_num,
            java_cup.runtime.lr_parser CUP$XiParser$parser,
            java.util.Stack<java_cup.runtime.Symbol> CUP$XiParser$stack,
            int                        CUP$XiParser$top)
            throws java.lang.Exception {
            return CUP$XiParser$do_action_part00000000(
                           CUP$XiParser$act_num,
                           CUP$XiParser$parser,
                           CUP$XiParser$stack,
                           CUP$XiParser$top);
    }
}

}
