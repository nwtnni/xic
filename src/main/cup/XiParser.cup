import java_cup.runtime.*;
import java_cup.runtime.ComplexSymbolFactory.*;

import java.util.List;
import java.util.ArrayList;

import lex.*;
import ast.*;
import xic.XicException;

parser code {:

    /* Exposed Interface */

    //TODO: throw XicException
    public static Node from(String source, String unit) throws XicException {
        XiLexer lexer = XiLexer.from(source, unit);
        XiParser parser = new XiParser(lexer);
        
        try {
        	return parser.parse().value();
        } catch (XicException xic) {
        	throw xic;
        } catch (Exception e) {
        	throw ParseException.internal(e);
        }
    }

    /* Private Utility Functions */

    private XiLexer lexer;

    private XiParser(XiLexer lexer) {
        super(lexer, lexer.getSymbolFactory());
        this.lexer = lexer;
    }

    public void unrecovered_syntax_error(Symbol cur_token) throws ParseException {
        done_parsing();
        ComplexSymbol sym = (ComplexSymbol) cur_token;
        throw new ParseException(sym);
    }

    public void syntax_error(Symbol cur_token) {}

    private Node evalInt(TempInt expr, boolean negate) throws ParseException {
        try {
            String orig = expr.literal;
            if (negate) {
                expr.literal = "-" + expr.literal;
            }
            return new XiInt(expr.location, Long.valueOf(expr.literal), orig, negate);
        } catch (NumberFormatException ex) {
            throw ParseException.numberFormatException(expr.location, expr.literal);
        }
    }

    private Node evalExpr(Node expr) throws ParseException {
        if (expr instanceof TempInt) {
            return evalInt((TempInt) expr, false);
        }
        return expr;
    }

    private Node evalNegExpr(Location l, Node expr) throws ParseException {
        if (expr instanceof TempInt) {
            expr.location = l;
            return evalInt((TempInt) expr, true);
        }
        return new Unary(l, Unary.Kind.INEGATE, expr);
    }

:};

scan with {: return lexer.nextToken(); :};

/* Terminals (tokens returned by the scanner). */
terminal                    USE, IF, WHILE, ELSE, RETURN, LENGTH, BREAK;     // New for PA7: BREAK
terminal                    INT, BOOL;
terminal                    UMINUS, LNEG, MULT, HMULT, DIV, MOD, ADD, MINUS;
terminal                    LTE, LT, GTE, GT, EQEQ, NEQ, LAND, LOR; 
terminal                    LPAREN, RPAREN, LBRACK, RBRACK, LBRACE, RBRACE;
terminal                    EQ, COLON, SEMICOLON, COMMA, DOT, UNDERSCORE;     // New for PA7: DOT
terminal                    THIS, CLASS, EXTENDS, NEW;                        // New for PA7: THIS, CLASS, EXTENDS, NEW
terminal    Void            NULL;                                             // New for PA7: NULL
terminal    Boolean         TRUE, FALSE;
terminal    String          IDENTIFIER;
terminal    String          INTEGER;
terminal    CharWrapper     CHAR;
terminal    StringWrapper   STRING;
terminal                    FUNCTIONCALL;

/* Non terminals */

// Top level
non terminal    Node            Program;
non terminal    List<Node>      UseDeclarations;

// Use statements
non terminal    Node            UseDeclr;

// Functions
non terminal    Node            FnDeclr, FnDef;
non terminal    List<Node>      ArgsTypeList, FArgsTypeList;
non terminal    List<Node>      ReturnTypeList, FReturnTypeList;
non terminal    Node            FnType;

// Block statements
non terminal    Node            BlockOptBraces, BlockStmts;
non terminal    Node            SingleStmtNoReturn, StmtNoReturn;
non terminal    List<Node>      StmtListNoReturn;

// Function calls
non terminal    Node            FnCall;
non terminal    List<Node>      Args, FArgs;

// Variable declarations
non terminal    Node            VarDeclr, VarType, KeyType;
non terminal    List<Node>      VarTypeIndexList, VarTypeIndexListNoExpr;

// Assignment
non terminal    Node            Assign, SingleAssignTarget, MultiAssignTarget;
non terminal    Node            AssignVarDeclr, AssignVarType;
non terminal    List<Node>      AssignTargetList, FAssignTargetList;

// Array targets for assignment
non terminal    Node            ArrayCall;
non terminal    List<Node>      IndexList;

// Control flow statements
non terminal    Node            WhileStmt, IfStmt, ElseStmt;

// Expressions
non terminal    Node            Expr;
non terminal    List<Node>      ExprList, FExprList;

// Array literals
non terminal    List<Node>      ArrayElems, FArrayElems;

non terminal                    OptSemicolon;

// TODO: PA7 organize these
non terminal    List<Node>      ProgramBody;                        // PA7

non terminal    Node            ClassDeclr;                         // PA7
non terminal    List<Node>      ClassDef;                           // PA7

non terminal    Node            GlobalVar;                          // PA7
non terminal    Node            GlobalVarType;                      // PA7
non terminal    Node            GlobalTypeIndexList;                // PA7
non terminal    Node            FGlobalTypeIndexList;               // PA7

non terminal    List<Node>      VarDeclrList, FVarDeclrList;        // PA7

non terminal    Node            WhileBlock;                         // PA7
non terminal    Node            WhileBlockStmts;                    // PA7

/* --- Precedences --- */
precedence nonassoc     ELSE;
precedence left         LOR;
precedence left         LAND;
precedence left         EQEQ, NEQ;
precedence left         LTE, LT, GTE, GT;
precedence left         ADD, MINUS;
precedence left         MULT, HMULT, DIV, MOD;
precedence right        UMINUS, LNEG;
precedence left         FUNCTIONCALL, LBRACK;   // LBRACK precedence is set to make ArrayCall precedence work
precedence left         NEW;
precedence left         DOT;                    // PA7

/* --- The grammar rules --- */
start with      Program;

// Optional Semicolon
OptSemicolon ::=
    | SEMICOLON
    ;

// Top level for program
// TODO: PA7
// Design choices? Allow for empty program body? Allow for no functions?
Program ::= UseDeclarations:uds ProgramBody:body
    {:
        RESULT = new Program(udsxleft, uds, body);
    :}
    ;

// Use statements
UseDeclarations ::= 
    {:
        RESULT = new ArrayList<Node>();
    :}
    | UseDeclarations:uds UseDeclr:u
    {:
        uds.add(u);
        RESULT = uds;
    :}
    ;

// Single use declaration
UseDeclr ::= 
    USE:u IDENTIFIER:id OptSemicolon
    {:
        RESULT = new Use(uxleft, id);
    :}
    ;

// Body of program after use statements 
// TODO: PA7 Should we wrap global variables into a nonterminal?
ProgramBody ::=
    {:
        RESULT = new ArrayList<Node>();
    :}
    | GlobalVar:v ProgramBody:pb
    {:
        pb.add(0,v);
        RESULT = pb;
    :} 
    | FnDeclr:f ProgramBody:pb
    {:
        pb.add(0,f);
        RESULT = pb;
    :}
    | ClassDeclr:c ProgramBody:pb
    {:
        pb.add(0,c);
        RESULT = pb;
    :} 
    ;

/* --- Global variables --- */

// Global Variables
// TODO: PA7
// TODO: do we need to differentiate the LHS from normal var declaration/assignment?
// TODO: are we missing global arrays intialized to literals?
GlobalVar ::=
    IDENTIFIER COLON GlobalVarType
    {:

    :}
    | VarDeclrList COLON GlobalVarType
    {:

    :}
    | IDENTIFIER COLON INT EQ INTEGER
    {:

    :}
    | IDENTIFIER COLON BOOL EQ TRUE
    {:

    :}
    | IDENTIFIER COLON BOOL EQ FALSE
    {:

    :}
    ;

// Global variable type
// TODO: PA7
GlobalVarType ::=
    KeyType:type GlobalTypeIndexList
    {:
        
    :}
    ;

// TODO: are we missing global arrays with no dimensions? 
// TODO: is this necessary to differentiate this from normal var declaration
GlobalTypeIndexList ::=
    {:

    :}
    | LBRACK INTEGER RBRACK FGlobalTypeIndexList
    {:

    :}
    | LBRACK IDENTIFIER RBRACK FGlobalTypeIndexList
    {:

    :}
    ;

FGlobalTypeIndexList ::=
    {:

    :}
    | LBRACK INTEGER RBRACK FGlobalTypeIndexList
    {:

    :}
    | LBRACK IDENTIFIER RBRACK FGlobalTypeIndexList
    {:

    :}
    ;

/* --- Class declarations --- */

// Class Declarations 
// TODO: PA7
ClassDeclr ::= 
    CLASS:c IDENTIFIER:id LBRACE ClassDef:cd RBRACE
    {:
        // TODO: construct class
        // RESULT = new Class(cxdleft, id, cd);
    :}
    | CLASS:c IDENTIFIER:id EXTENDS IDENTIFIER LBRACE ClassDef:cd RBRACE
    {:
        // TODO: construct class
    :}
    ;

// Class definition
// TODO: rename this symbol as FnDef is used for the signature of a function
// so ClassDef should not be the class body
ClassDef ::= 
    {:
        RESULT = new ArrayList<Node>();
    :}
    | FnDeclr:f ClassDef:cd
    {:
        cd.add(0,f);
        RESULT = cd;
    :}
    | GlobalVar ClassDef    
    {:
        // TODO design choice
        // Do we treat instance variables syntactically the same as global variables?
    :}
    ;

/* --- Function and procedure declaration --- */

// Function declaration
FnDeclr ::= 
    FnDef:def LBRACE:l BlockStmts:block RBRACE
    {:
        // TODO because only 1 lookahead--is it possible to refactor?
        block.location = lxleft;
        RESULT = new Fn(defxleft, (Fn) def, block);
    :}
    ;

// Function body
FnDef ::= 
    IDENTIFIER:id LPAREN ArgsTypeList:atl RPAREN COLON ReturnTypeList:rtl
    {:
        RESULT = new Fn(idxleft, id, atl, rtl);
    :}
    | IDENTIFIER:id LPAREN ArgsTypeList:atl RPAREN
    {:
        RESULT = new Fn(idxleft, id, atl);
    :}
    ;

// Function arguments list
ArgsTypeList ::= 
    {:
        RESULT = new ArrayList<Node>();
    :}
    | IDENTIFIER:id COLON FnType:type FArgsTypeList:fatl
    {:
        fatl.add(0, new Declare(idxleft, id, type));
        RESULT = fatl;
    :}
    ;

FArgsTypeList ::= 
    {:
        RESULT = new ArrayList<Node>();
    :}
    | COMMA IDENTIFIER:id COLON FnType:type FArgsTypeList:fatl
    {:
        fatl.add(0, new Declare(idxleft, id, type));
        RESULT = fatl;
    :}
    ;

// Function return type list
ReturnTypeList ::= 
    FnType:type FReturnTypeList:frtl
    {:
        frtl.add(0, type);
        RESULT = frtl;
    :}
    ;

FReturnTypeList ::= 
    {:
        RESULT = new ArrayList<Node>();
    :}
    | COMMA FnType:type FReturnTypeList:frtl
    {:
        frtl.add(0, type);
        RESULT = frtl;
    :}
    ;

// Types in function signature
// TODO: PA7 update to KeyType
FnType ::= 
    INT:i
    {:
        RESULT = new XiType(ixleft, "int");
    :}
    | BOOL:b
    {:
        RESULT = new XiType(bxleft, "bool");
    :}
    | FnType:type LBRACK RBRACK
    {:
        RESULT = new XiType(typexleft, type);
    :}
    ;

/* --- Blocks --- */

// Block with braces OR single statement (excluding break/return)
BlockOptBraces ::=
    LBRACE:l BlockStmts:bs RBRACE
    {:
        bs.location = lxleft;
        RESULT = bs;
    :}
    | SingleStmtNoReturn:ssnr
    {:
        RESULT = ssnr;
    :}
    ;

// Block of statements with possible return at the end
// Constructs a return based on the number of expressions 
// associated with that return statement
BlockStmts ::= 
    StmtListNoReturn:slnr RETURN:r ExprList:el OptSemicolon
    {:
        if (el.size() == 0) {
        	slnr.add(new Return(rxleft));
        } else {
            slnr.add(new Return(rxleft, el));
        }
        RESULT = new Block(slnr);
    :}
    | StmtListNoReturn:slnr
    {:
        RESULT = new Block(slnr);
    :}
    ;

// Single statement excluding break/return
SingleStmtNoReturn ::= 
    Assign:a OptSemicolon
    {:
        RESULT = a;
    :}
    | IfStmt:i 
    {:
        RESULT = i;
    :}
    | WhileStmt:w 
    {:
        RESULT = w;
    :}
    | FnCall:p OptSemicolon
    {:
        // Procedure calls are syntactically the same as function calls
        RESULT = p;
    :}
    | VarDeclr:v OptSemicolon
    {:
        RESULT = v;
    :}
    ;

// Expression list for returns
ExprList ::= 
    {:
        RESULT = new ArrayList<Node>();
    :}
    | Expr:e FExprList:fel
    {:
        fel.add(0, evalExpr(e));
        RESULT = fel;
    :}
    ;

FExprList ::=
    {:
        RESULT = new ArrayList<Node>();
    :}
    | COMMA Expr:e FExprList:fel 
    {:
        fel.add(0, evalExpr(e));
        RESULT = fel;
    :}
    ;

// List of statements without break/return
StmtListNoReturn ::= 
    {:
        RESULT = new ArrayList<Node>();
    :}
    | StmtNoReturn:snr StmtListNoReturn:slnr
    {:
        slnr.add(0, snr);
        RESULT = slnr;
    :}
    ;

// Block of statements or single statement excluding break/return 
// with optional semicolon after block/statement.
StmtNoReturn ::= 
    LBRACE:l BlockStmts:block RBRACE OptSemicolon
    {:
        // TODO because only 1 lookahead--is it possible to refactor?
        block.location = lxleft;
        RESULT = block;
    :}
    | SingleStmtNoReturn:ssnr
    {:
        RESULT = ssnr;
    :}
    ;


/* --- Function calls --- */
// Parser does not differentiate between procedures and functions

// Top level function call production
FnCall ::= 
    IDENTIFIER:id LPAREN Args:args RPAREN
        {:
            RESULT = new Call(idxleft, id, args);
        :}
        %prec FUNCTIONCALL
    ;

// List of expressions that are the arguments in a function call
Args ::= 
    {:
        RESULT = new ArrayList<Node>();
    :}
    | Expr:e FArgs:fargs
    {:  
        fargs.add(0, evalExpr(e));
        RESULT = fargs;
    :}
    ;

FArgs ::=
    {:
        RESULT = new ArrayList<Node>();
    :} 
    | COMMA Expr:e FArgs:fargs
    {:
        fargs.add(0, evalExpr(e));
        RESULT = fargs;
    :}
    ;


/* --- Variable declaration statements --- */

// Top level variable declaration production
VarDeclr ::= 
    IDENTIFIER:id COLON VarType:type
    {:
        RESULT = new Declare(idxleft, id, type);
    :}
    | VarDeclrList COLON VarType
    {:
        // TODO: PA7 multiple variable declarations
    :}
    ;

// For multiple variable declarations of the same type
VarDeclrList ::=
    IDENTIFIER:a COMMA IDENTIFIER:b FVarDeclrList:idList
    {:
        idList.add(0, new Declare(bxleft, b, null));
        idList.add(0, new Declare(axleft, a, null));
        RESULT = idList;
    :}
    ;

FVarDeclrList ::=
    {:
        RESULT = new ArrayList<>();
    :}
    | COMMA IDENTIFIER:id FVarDeclrList:idList
    {:
        idList.add(new Declare(idxleft, id, null));
    :}
    ;

// Types for variable declarations
// Constructs array types recursively
VarType ::= 
    KeyType:type VarTypeIndexList:vtil
    {:
        for (int i=vtil.size()-1; i>=0; i--) {
            if (vtil.get(i) == null) {
                type = new XiType(typexleft,type);
            } else {
                type = new XiType(typexleft, type, vtil.get(i));
            }
        }
        RESULT = type;
    :}
    ;

// Primitive and class types
KeyType ::= 
    INT:i
    {:
        RESULT = new XiType(ixleft, "int");
    :}
    | BOOL:b
    {:
        RESULT = new XiType(bxleft, "bool");
    :}
    | IDENTIFIER:i
    {:
        // TODO: PA7 construct class types
    :}
    ;

// List of expressions for array types with dimensions
VarTypeIndexList ::=
    {:
        RESULT = new ArrayList<Node>();
    :}
    | LBRACK Expr:e RBRACK VarTypeIndexList:vtil
    {:
        vtil.add(0, evalExpr(e));
        RESULT = vtil;
    :}
    | LBRACK RBRACK VarTypeIndexListNoExpr:vtilne
    {:
        vtilne.add(0, null);
        RESULT = vtilne;
    :}
    ;

// List of empty (null) values for array types
VarTypeIndexListNoExpr ::=
    {:
        RESULT = new ArrayList<Node>();
    :}
    | LBRACK RBRACK VarTypeIndexListNoExpr:vtilne
    {:
        vtilne.add(0, null);
        RESULT = vtilne;
    :}
    ;


/* --- Assignment statements --- */

// Top level assignment production
Assign ::= 
    AssignTargetList:il EQ Expr:e
    {:
        RESULT = new Assign(ilxleft, il, evalExpr(e));
    :}
    | SingleAssignTarget:san EQ Expr:e
    {:
        RESULT = new Assign(sanxleft, san, evalExpr(e));
    :}
    ;

// LHS of multiple assignment
AssignTargetList ::= 
    MultiAssignTarget:an COMMA MultiAssignTarget:bn FAssignTargetList:fl
    {:
        fl.add(0, bn);
        fl.add(0, an);
        RESULT = fl;
    :};

FAssignTargetList ::= 
    {:
        RESULT = new ArrayList<Node>();
    :}
    | COMMA MultiAssignTarget:an FAssignTargetList:fl
    {:
        fl.add(0, an);
        RESULT = fl;
    :}
    ;

// A single identifier on the LHS of a multiple assignment
MultiAssignTarget ::=
    UNDERSCORE:u
    {:
        RESULT = new Declare(uxleft);
    :}
    | AssignVarDeclr:v
    {:
        RESULT = v;
    :}
    ;

// LHS of single assignment
SingleAssignTarget ::= 
    UNDERSCORE:u
    {:
        RESULT = new Declare(uxleft);
    :}
    | IDENTIFIER:id
    {:
        RESULT = new Var(idxleft, id);
    :}
    | ArrayCall:a
    {:
        RESULT = a;
    :}
    | AssignVarDeclr:v
    {:
        RESULT = v;
    :}
    ;

// Variable declaration on LHS of assignment
AssignVarDeclr ::= 
    IDENTIFIER:id COLON AssignVarType:type 
    {:
        RESULT = new Declare(idxleft, id, type);
    :}
    ;

// Variable type on LHS of assignment
// Constructs array types recursively
// Restricts array types to dimensionless ones
AssignVarType ::=
    KeyType:type VarTypeIndexListNoExpr:vtilne
    {:
        for (int i = vtilne.size()-1; i >= 0; i--) {
            if (vtilne.get(i) == null) {
                type = new XiType(typexleft, type);
            } else {
                type = new XiType(typexleft, type, vtilne.get(i));
            }
        }
        RESULT = type;
    :}
    ;

// Array access for LHS of assignment
ArrayCall ::= 
    FnCall:fc LBRACK Expr:e RBRACK IndexList:il
        {:
            il.add(0, evalExpr(e));
            Index index = new Index(fcxleft, fc, il.get(0));
            for (int i = 1; i < il.size(); i++) {
                Node n = il.get(i);
                index = new Index(n.location, index, n);
            }
            RESULT = index;
        :}
    | IDENTIFIER:id LBRACK Expr:e RBRACK IndexList:il
        {:
            il.add(0, evalExpr(e));
            Index index = new Index(idxleft, new Var(idxleft, id), il.get(0));
            for (int i = 1; i < il.size(); i++) {
                Node n = il.get(i);
                index = new Index(n.location, index, n);
            }
            RESULT = index;
        :}
    ;

// List of expressions for indices in an array access
IndexList ::=
        {:
            RESULT = new ArrayList<Node>();
        :}
    | LBRACK Expr:e RBRACK IndexList:il
        {:
            il.add(0, evalExpr(e));
            RESULT = il;
        :}
    ;


/* --- Control flow statements --- */

// While statement
WhileStmt ::= 
    WHILE:w Expr:e WhileBlock:block
    {:
        RESULT = new While(wxleft, evalExpr(e), block);
    :}
    ;

// Block for while
// While statements have one of the following:
// - A block
// - A single statement excluding return
WhileBlock ::= 
    LBRACE:l WhileBlockStmts:wbs RBRACE
    {:
        // TODO: PA7 decide what do do with while block statements
        wbs.location = lxleft;
        RESULT = wbs;
    :}
    | SingleStmtNoReturn:ssnr
    {:
        RESULT = ssnr;
    :}
    | BREAK:b OptSemicolon
    {:
        // TODO: RESULT = new Break(bxleft);
    :}
    ;

// Block of statements ending with return or break
WhileBlockStmts ::=
    StmtListNoReturn:slnr RETURN:r ExprList:el OptSemicolon
    {:
        if (el.size() == 0) {
        	slnr.add(new Return(rxleft));
        } else {
            slnr.add(new Return(rxleft, el));
        }
        RESULT = new Block(slnr);
    :}
    | StmtListNoReturn:slnr BREAK:b OptSemicolon
    {:
        // TODO: slnr.add(new Break(bxleft));
        RESULT = new Block(slnr);
    :}
    | StmtListNoReturn:slnr
    {:
        RESULT = new Block(slnr);
    :}
    ;

// If statement
IfStmt ::= 
    IF:i Expr:e BlockOptBraces:block ElseStmt:elseBlock
    {:
        if (elseBlock == null) {
            RESULT = new If(ixleft, evalExpr(e), block);
        } else {
            RESULT = new If(ixleft, evalExpr(e), block, elseBlock);
        }
    :}
    ;

// Optional else statement
ElseStmt ::= 
    {: 
        RESULT = null;
    :}
    | ELSE:el BlockOptBraces:block 
    {:
        RESULT = block;
    :}
    ;


/* --- Expressions --- */

Expr ::= 
    LPAREN Expr:e RPAREN
        {:
            RESULT = evalExpr(e);
        :}
    | LNEG:l Expr:e
        {:
            RESULT = new Unary(lxleft, Unary.Kind.LNEGATE, evalExpr(e));
        :}
    | MINUS:m Expr:e
        {:
            RESULT = evalNegExpr(mxleft, e);
        :}
        %prec UMINUS
    | Expr:e1 MULT:b Expr:e2
        {:
            RESULT = new Binary(bxleft, Binary.Kind.TIMES, evalExpr(e1), evalExpr(e2));
        :}
    | Expr:e1 HMULT:b Expr:e2
        {:
            RESULT = new Binary(bxleft, Binary.Kind.HIGH_TIMES, evalExpr(e1), evalExpr(e2));
        :}
    | Expr:e1 DIV:b Expr:e2
        {:
            RESULT = new Binary(bxleft, Binary.Kind.DIVISION, evalExpr(e1), evalExpr(e2));
        :}
    | Expr:e1 MOD:b Expr:e2
        {:
            RESULT = new Binary(bxleft, Binary.Kind.MODULO, evalExpr(e1), evalExpr(e2));
        :}
    | Expr:e1 ADD:b Expr:e2
        {:
            RESULT = new Binary(bxleft, Binary.Kind.PLUS, evalExpr(e1), evalExpr(e2));
        :}
    | Expr:e1 MINUS:b Expr:e2
        {:
            RESULT = new Binary(bxleft, Binary.Kind.MINUS, evalExpr(e1), evalExpr(e2));
        :}
    | Expr:e1 LTE:b Expr:e2
        {:
            RESULT = new Binary(bxleft, Binary.Kind.LE, evalExpr(e1), evalExpr(e2));
        :}
    | Expr:e1 LT:b Expr:e2
        {:
            RESULT = new Binary(bxleft, Binary.Kind.LT, evalExpr(e1), evalExpr(e2));
        :}
    | Expr:e1 GTE:b Expr:e2
        {:
            RESULT = new Binary(bxleft, Binary.Kind.GE, evalExpr(e1), evalExpr(e2));
        :}
    | Expr:e1 GT:b Expr:e2
        {:
            RESULT = new Binary(bxleft, Binary.Kind.GT, evalExpr(e1), evalExpr(e2));
        :}
    | Expr:e1 EQEQ:b Expr:e2
        {:
            RESULT = new Binary(bxleft, Binary.Kind.EQ, evalExpr(e1), evalExpr(e2));
        :}
    | Expr:e1 NEQ:b Expr:e2
        {:
            RESULT = new Binary(bxleft, Binary.Kind.NE, evalExpr(e1), evalExpr(e2));
        :}
    | Expr:e1 LAND:b Expr:e2
        {:
            RESULT = new Binary(bxleft, Binary.Kind.AND, evalExpr(e1), evalExpr(e2));
        :}
    | Expr:e1 LOR:b Expr:e2
        {:
            RESULT = new Binary(bxleft, Binary.Kind.OR, evalExpr(e1), evalExpr(e2));
        :}
    | FnCall:fc
        {:
            RESULT = fc;
        :}
    | LENGTH:l LPAREN Expr:e RPAREN
        {:
            RESULT = new Call(lxleft, "length", evalExpr(e));
        :}
        %prec FUNCTIONCALL
    | Expr:e1 LBRACK Expr:e2 RBRACK
        {:
            Index index = new Index(e1xleft, evalExpr(e1), evalExpr(e2));
            RESULT = index;
        :}
    | LBRACE ArrayElems:ae RBRACE
        {:
            RESULT = new XiArray(aexleft, ae);
        :}
    | TRUE:t
        {:
            RESULT = new XiBool(txleft, t); 
        :}
    | FALSE:f
        {:
            RESULT = new XiBool(fxleft, f);
        :}
    | INTEGER:i
        {:
            RESULT = new TempInt(ixleft, i);
        :}
    | CHAR:c
        {:
            RESULT = new XiChar(cxleft, c.name, c.value);
        :}
    | STRING:s
        {:
            RESULT = new XiString(sxleft, s.name, s.value);
        :}
    | IDENTIFIER:id
        {:
            RESULT = new Var(idxleft, id);
        :}
    | NULL:n    // TOD): PA7
        {:
            // RESULT = new Null(nxleft);
        :}
    | THIS:t    // TODO: PA7
        {:
            // RESULT = new This(txleft);
        :}
    | Expr:e1 DOT Expr:e2   // TODO: PA7
        {:
            // RESULT new Dot(e1xleft, e1, e2);
        :}
    | NEW:n IDENTIFIER:id // TODO: PA7
        {:
            // RESULT = new New(nxleft, id);
        :}
    ;

// List of exprssions for array literals
ArrayElems ::= 
    {:
        RESULT = new ArrayList<Node>();
    :}
    | Expr:e FArrayElems:fae
    {:
        fae.add(0, evalExpr(e));
        RESULT = fae;
    :}
    ;

FArrayElems ::= 
    {:
        RESULT = new ArrayList<Node>();
    :}
    | COMMA
    {:
        RESULT = new ArrayList<Node>();
    :}
    | COMMA Expr:e FArrayElems:fae
    {:
        fae.add(0, evalExpr(e));
        RESULT = fae;
    :}
    ;