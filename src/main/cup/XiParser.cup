import java_cup.runtime.*;
import java_cup.runtime.ComplexSymbolFactory.*;
import java.util.ArrayList;

import lexer.*;
import ast.*;
import xic.XicException;

parser code {:

    /* Exposed Interface */

    //TODO: throw XicException
    public static Node from(String source, String unit) throws XicException {
        XiLexer lexer = XiLexer.from(source, unit);
        XiParser parser = new XiParser(lexer);
        
        try {
        	return parser.parse().value();
        } catch (XicException xic) {
        	throw xic;
        } catch (Exception e) {
        	throw ParseException.internal(e);
        }
    }

    /* Private Utility Functions */

    private XiLexer lexer;

    private XiParser(XiLexer lexer) {
        super(lexer, lexer.getSymbolFactory());
        this.lexer = lexer;
    }

    public void unrecovered_syntax_error(Symbol cur_token) throws ParseException {
        done_parsing();
        ComplexSymbol sym = (ComplexSymbol) cur_token;
        throw new ParseException(sym);
    }

    public void syntax_error(Symbol cur_token) {}

:};

scan with {: return lexer.nextToken(); :};

/* Terminals (tokens returned by the scanner). */
terminal                    USE, IF, WHILE, ELSE, RETURN, LENGTH;
terminal                    INT, BOOL;
terminal                    UMINUS, LNEG, MULT, HMULT, DIV, MOD, ADD, MINUS;
terminal                    LTE, LT, GTE, GT, EQEQ, NEQ, LAND, LOR; 
terminal                    LPAREN, RPAREN, LBRACK, RBRACK, LBRACE, RBRACE;
terminal                    EQ, COLON, SEMICOLON, COMMA, /*DOT,*/ UNDERSCORE;
terminal    Boolean         TRUE, FALSE; 
terminal    String          IDENTIFIER;
terminal    Long            INTEGER;
terminal    CharWrapper     CHAR;
terminal    StringWrapper   STRING;

/* Non terminals */
non terminal    Node                Expr;
non terminal    ArrayList<Node>     ExprList, FExprList;
non terminal    Node                FnCall;
non terminal    ArrayList<Node>     Args, FArgs; 
non terminal    Node                ArrayCall;
non terminal    ArrayList<Node>     IndexList;
non terminal    ArrayList<Node>     ArrayElems, FArrayElems;
non terminal    Node                VarDeclr, VarType, KeyType;
non terminal    Node                Assign, AssignName;
non terminal    ArrayList<Node>     IDList, FIDList;
non terminal    Node                WhileStmt, IfStmt, ElseStmt;
non terminal    Node                BlockOptBraces, BlockStmts;
non terminal    Node                SingleStmtNoReturn, Procedure, StmtNoReturn;
non terminal    ArrayList<Node>     StmtListNoReturn;
non terminal    Node                FnDeclr, FnDef;
non terminal    ArrayList<Node>     ArgsTypeList, FArgsTypeList, ReturnTypeList, FReturnTypeList;
non terminal    Node                FnType;
non terminal    Node                ProcedureDeclr, ProcedureDef;
non terminal    Node                UseDeclr;
non terminal    ArrayList<Node>     UseDeclarations, FnDeclarations;
non terminal    Node                Program;
non terminal                        OptSemicolon;

/* Precedences */
precedence nonassoc     ELSE;
precedence left         LOR;
precedence left         LAND;
precedence left         EQEQ, NEQ;
precedence left         LTE, LT, GTE, GT;
precedence left         ADD, MINUS;
precedence left         MULT, HMULT, DIV, MOD;
precedence right        UMINUS, LNEG;

/* The grammar rules */
start with      Program;

// Optional Semicolon
OptSemicolon ::=
    | SEMICOLON
    ;

// Program
Program ::= UseDeclarations:uds FnDeclarations:fds
    {:
        RESULT = new Program(udsxleft, uds, fds);
    :}
    ;

// Uses
UseDeclarations ::= 
    {:
        RESULT = new ArrayList<Node>();
    :}
    | UseDeclarations:uds UseDeclr:u
    {:
        uds.add(0, u);
        RESULT = uds;
    :}
    ;

// Use Declaration
UseDeclr ::= 
    USE:u IDENTIFIER:id OptSemicolon
    {:
        RESULT = new Use(uxleft, id);
    :}
    ;

// Functions
FnDeclarations ::= 
    {:
        RESULT = new ArrayList<Node>();
    :}
    | FnDeclr:f FnDeclarations:fds
    {:
        fds.add(0, f);
        RESULT = fds;
    :}
    ;

// Function and Procedure Declaration
FnDeclr ::= 
    FnDef:def LBRACE:l BlockStmts:block RBRACE
    {:
        //TODO because only 1 lookahead--is it possible to refactor?
        block.location = lxleft;

        RESULT = new Fn(defxleft, (Fn) def, block);
    :}
    ;

FnDef ::= 
    IDENTIFIER:id LPAREN ArgsTypeList:atl RPAREN COLON ReturnTypeList:rtl
    {:
        RESULT = new Fn(idxleft,id,atl,rtl);
    :}
    | IDENTIFIER:id LPAREN ArgsTypeList:atl RPAREN
    {:
        RESULT = new Fn(idxleft,id,atl);
    :}
    ;

ArgsTypeList ::= 
    {:
        RESULT = new ArrayList<Node>();
    :}
    | IDENTIFIER:id COLON FnType:type FArgsTypeList:fatl
    {:
        fatl.add(0, new Declare(idxleft, id, type));
        RESULT = fatl;
    :}
    ;

FArgsTypeList ::= 
    {:
        RESULT = new ArrayList<Node>();
    :}
    | COMMA IDENTIFIER:id COLON FnType:type FArgsTypeList:fatl
    {:
        fatl.add(0, new Declare(idxleft, id, type));
        RESULT = fatl;
    :}
    ;

ReturnTypeList ::= 
    FnType:type FReturnTypeList:frtl
    {:
        frtl.add(0, type);
        RESULT = frtl;
    :}
    ;

FReturnTypeList ::= 
    {:
        RESULT = new ArrayList<Node>();
    :}
    | COMMA FnType:type FReturnTypeList:frtl
    {:
        frtl.add(0, type);
        RESULT = frtl;
    :}
    ;

FnType ::= 
    INT:i
    {:
        RESULT = new XiType(ixleft, "int");
    :}
    | BOOL:b
    {:
        RESULT = new XiType(bxleft, "bool");
    :}
    | FnType:type LBRACK RBRACK
    {:
        RESULT = new XiType(typexleft, type);
    :}
    ;

// Block with braces OR single non-return statement
BlockOptBraces ::=
    LBRACE:l BlockStmts:bs RBRACE
    {:
        bs.location = lxleft;
        RESULT = bs;
    :}
    | SingleStmtNoReturn:ssnr
    {:
        ArrayList<Node> block = new ArrayList<>();
        block.add(ssnr);
        RESULT = new Block(ssnrxleft, block);
    :}
    ;

// Block of statements with possible return at the end
BlockStmts ::= 
    StmtListNoReturn:slnr RETURN:r ExprList:el OptSemicolon
    {:
        if (el.size() == 0) {
            RESULT = new Block(slnr, new Return(rxleft));
        } else if (el.size() == 1) {
            RESULT = new Block(slnr, new Return(rxleft, el.get(0)));
        } else {
            Multiple m = new Multiple(elxleft, el, Multiple.Kind.RETURN);
            RESULT = new Block(slnr, new Return(rxleft, m));
        }
    :}
    | StmtListNoReturn:slnr
    {:
        RESULT = new Block(slnr);
    :}
    ;

ExprList ::= 
    {:
        RESULT = new ArrayList<Node>();
    :}
    | Expr:e FExprList:fel
    {:
        fel.add(0, e);
        RESULT = fel;
    :}
    ;

FExprList ::=
    {:
        RESULT = new ArrayList<Node>();
    :}
    | COMMA Expr:e FExprList:fel 
    {:
        fel.add(0, e);
        RESULT = fel;
    :}
    ;

SingleStmtNoReturn ::= 
    Assign:a OptSemicolon
    {:
        RESULT = a;
    :}
    | IfStmt:i
    {:
        RESULT = i;
    :}
    | WhileStmt:w 
    {:
        RESULT = w;
    :}
    | FnCall:p OptSemicolon // Procedure
    {:
        RESULT = p;
    :}
    | VarDeclr:v OptSemicolon
    {:
        RESULT = v;
    :}
    ;

StmtListNoReturn ::= 
    {:
        RESULT = new ArrayList<Node>();
    :}
    | StmtNoReturn:snr StmtListNoReturn:slnr
    {:
        slnr.add(0, snr);
        RESULT = slnr;
    :}
    ;

StmtNoReturn ::= 
    LBRACE:l BlockStmts:block RBRACE OptSemicolon
    {:
        //TODO because only 1 lookahead--is it possible to refactor?
        block.location = lxleft;

        RESULT = block;
    :}
    | SingleStmtNoReturn:ssnr
    {:
        RESULT = ssnr;
    :}
    ;

// Function Calls
FnCall ::= 
    IDENTIFIER:id LPAREN Args:args RPAREN
        {:
            RESULT = new Call(idxleft, id, args);
        :}
    | LENGTH:l LPAREN Args:args RPAREN
        {:
            RESULT = new Call(lxleft, "length", args);
        :}
    ;

Args ::= 
        {:
            RESULT = new ArrayList<Node>();
        :}
    | Expr:e FArgs:fargs
        {:  
            fargs.add(0, e);
            RESULT = fargs;
        :}
    ;

FArgs ::=
    {:
        RESULT = new ArrayList<Node>();
    :} 
    | COMMA Expr:e FArgs:fargs
        {:
            fargs.add(0, e);
            RESULT = fargs;
        :}
    ;

// Array Calls
ArrayCall ::= 
    STRING:s LBRACK Expr:e RBRACK IndexList:il 
        {:
            il.add(0, e);
            Index index = new Index(sxleft, new XiString(sxleft, s.name, s.value), il.get(0));
            for (int i = 1; i < il.size(); i++) {
                Node n = il.get(i);
                index = new Index(n.location, index, n);
            }
            RESULT = index;
        :}
    | FnCall:fc LBRACK Expr:e RBRACK IndexList:il
        {:
            il.add(0, e);
            Index index = new Index(fcxleft, fc, il.get(0));
            for(int i =1; i<il.size(); i++) {
                Node n = il.get(i);
                index = new Index(n.location, index, n);
            }
            RESULT = index;
        :}
    | IDENTIFIER:id LBRACK Expr:e RBRACK IndexList:il
        {:
            il.add(0, e);
            Index index = new Index(idxleft, new Var(idxleft, id), il.get(0));
            for(int i =1; i<il.size(); i++) {
                Node n = il.get(i);
                index = new Index(n.location, index, n);
            }
            RESULT = index;
        :}
    ;

IndexList ::=
        {:
            RESULT = new ArrayList<Node>();
        :}
    | LBRACK Expr:e RBRACK IndexList:il
        {:
            il.add(0, e);
            RESULT = il;
        :}
    ;

// Array List
ArrayElems ::= 
    {:
        RESULT = new ArrayList<Node>();
    :}
    | Expr:e FArrayElems:fae
    {:
        fae.add(0, e);
        RESULT = fae;
    :}
    ;

FArrayElems ::= 
    {:
        RESULT = new ArrayList<Node>();
    :}
    | COMMA
    {:
        RESULT = new ArrayList<Node>();
    :}
    | COMMA Expr:e FArrayElems:fae
    {:
        fae.add(0, e);
        RESULT = fae;
    :}
    ;

// Var Declaration
VarDeclr ::= 
    IDENTIFIER:id COLON VarType:type
    {:
        RESULT = new Declare(idxleft, id, type);
    :};

VarType ::= 
    VarType:type LBRACK RBRACK
    {:
        RESULT = new XiType(typexleft, type);
    :}
    | VarType:type LBRACK Expr:e RBRACK
    {:
        RESULT = new XiType(typexleft, type, e);
    :}
    | KeyType:type 
    {:
        RESULT = type;
    :}
    ;

KeyType ::= 
    INT:i
    {:
        RESULT = new XiType(ixleft, "int");
    :}
    | BOOL:b
    {:
        RESULT = new XiType(bxleft, "bool");
    :}
    ;

// Assignment
Assign ::= 
    IDList:il EQ Expr:e
    {:
        if (il.size() == 1) {
            RESULT = new Assign(ilxleft, il.get(0), e);
        } else {
            RESULT = new Assign(ilxleft, new Multiple(ilxleft, il, Multiple.Kind.ASSIGN), e);
        }
    :};

IDList ::= 
    AssignName:an FIDList:fl
    {:
        fl.add(0, an);
        RESULT = fl;
    :};

FIDList ::= 
    {:
        RESULT = new ArrayList<Node>();
    :}
    | COMMA AssignName:an FIDList:fl
    {:
        fl.add(0, an);
        RESULT = fl;
    :}
    ;

AssignName ::= 
    UNDERSCORE:u
    {:
        RESULT = new Declare(uxleft);
    :}
    | IDENTIFIER:id
    {:
        RESULT = new Var(idxleft, id);
    :}
    | ArrayCall:a
    {:
        RESULT = a;
    :}
    | VarDeclr:v
    {:
        RESULT = v;
    :}
    ;

// While Statement
WhileStmt ::= WHILE:w Expr:e BlockOptBraces:block
    {:
        RESULT = new While(wxleft, e, block);
    :};

// If Statement
IfStmt ::= IF:i Expr:e BlockOptBraces:block ElseStmt:el
    {:
        If node = (el == null) ? new If(ixleft, e, block) : new If(ixleft, e, block, el);
        RESULT = node;
    :}
    ;

ElseStmt ::= 
    {: 
        RESULT = null;
    :}
    | ELSE:el BlockOptBraces:block 
    {:
        RESULT = new Else(elxleft,block);
    :}
    ;

// Expressions
Expr ::= 
    LPAREN Expr:e RPAREN
        {:
            RESULT = e;
        :}
    | LNEG:l Expr:e
        {:
            RESULT = new Unary(lxleft, Unary.Kind.LNEGATE, e);
        :}
    | MINUS:m Expr:e
        {:
            RESULT = new Unary(mxleft, Unary.Kind.INEGATE, e);
        :}
        %prec UMINUS
    | Expr:e1 MULT:b Expr:e2
        {:
            RESULT = new Binary(bxleft, Binary.Kind.TIMES, e1,e2);
        :}
    | Expr:e1 HMULT:b Expr:e2
        {:
            RESULT = new Binary(bxleft, Binary.Kind.HIGH_TIMES, e1,e2);
        :}
    | Expr:e1 DIV:b Expr:e2
        {:
            RESULT = new Binary(bxleft, Binary.Kind.DIVISION, e1,e2);
        :}
    | Expr:e1 MOD:b Expr:e2
        {:
            RESULT = new Binary(bxleft, Binary.Kind.MODULO, e1,e2);
        :}
    | Expr:e1 ADD:b Expr:e2
        {:
            RESULT = new Binary(bxleft, Binary.Kind.PLUS, e1,e2);
        :}
    | Expr:e1 MINUS:b Expr:e2
        {:
            RESULT = new Binary(bxleft, Binary.Kind.MINUS, e1,e2);
        :}
    | Expr:e1 LTE:b Expr:e2
        {:
            RESULT = new Binary(bxleft, Binary.Kind.LE, e1,e2);
        :}
    | Expr:e1 LT:b Expr:e2
        {:
            RESULT = new Binary(bxleft, Binary.Kind.LT, e1,e2);
        :}
    | Expr:e1 GTE:b Expr:e2
        {:
            RESULT = new Binary(bxleft, Binary.Kind.GE, e1,e2);
        :}
    | Expr:e1 GT:b Expr:e2
        {:
            RESULT = new Binary(bxleft, Binary.Kind.GT, e1,e2);
        :}
    | Expr:e1 EQEQ:b Expr:e2
        {:
            RESULT = new Binary(bxleft, Binary.Kind.EQ, e1,e2);
        :}
    | Expr:e1 NEQ:b Expr:e2
        {:
            RESULT = new Binary(bxleft, Binary.Kind.NE, e1,e2);
        :}
    | Expr:e1 LAND:b Expr:e2
        {:
            RESULT = new Binary(bxleft, Binary.Kind.AND, e1,e2);
        :}
    | Expr:e1 LOR:b Expr:e2
        {:
            RESULT = new Binary(bxleft, Binary.Kind.OR, e1,e2);
        :}
    | FnCall:fc
        {:
            RESULT = fc;
        :}
    | ArrayCall:ac
        {:
            RESULT = ac;
        :}
    | LBRACE ArrayElems:ae RBRACE
        {:
            RESULT = new XiArray(aexleft, ae);
        :}
    | TRUE:t
        {:
            RESULT = new XiBool(txleft, t); 
        :}
    | FALSE:f
        {:
            RESULT = new XiBool(fxleft, f);
        :}
    | INTEGER:i
        {:
            RESULT = new XiInt(ixleft, i);
        :}
    | CHAR:c
        {:
            RESULT = new XiChar(cxleft, c.name, c.value);
        :}
    | STRING:s
        {:
            RESULT = new XiString(sxleft, s.name, s.value);
        :}
    | IDENTIFIER:id
        {:
            RESULT = new Var(idxleft, id);
        :}
    ;
